<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YXX博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-29T11:50:18.024Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yunxiange</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你真的搞懂Promise了吗？</title>
    <link href="http://yoursite.com/2017/10/14/are-you-rellay-understand-promise/"/>
    <id>http://yoursite.com/2017/10/14/are-you-rellay-understand-promise/</id>
    <published>2017-10-14T06:10:01.000Z</published>
    <updated>2017-10-29T11:50:18.024Z</updated>
    
    <content type="html">&lt;p&gt;JavaScript开发者们，现在得承认：我们有一个关于promise的问题。&lt;/p&gt;
&lt;p&gt;不，这不是promise自身问题。采用&lt;a href=&quot;https://promisesaplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A+ 规范&lt;/a&gt;定义的Promise是非常酷的。&lt;/p&gt;
&lt;p&gt;在过去一年中我遇到的最大问题，正如我看到许多程序员为PouchDB API和重promise API挣扎，是这个：&lt;/p&gt;
&lt;p&gt;我们当中许多人在使用promise没有真正明白它。&lt;/p&gt;
&lt;p&gt;如果你很难相信，想想我最近在twitter上发的&lt;a href=&quot;https://twitter.com/nolanlawson/status/578948854411878400&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内容&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;问题：这四个promise的区别是什么？&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; doSomethingElse();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    doSomethingElse();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doSomething().then(doSomethingElse());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doSomething().then(doSomethingElse);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你知道这个答案，恭喜你是一个promise高手。你有权限停止阅读此博文。&lt;/p&gt;
&lt;p&gt;相对其他99.99%的人你是在一个好公司。没有人回复我的推文可以解决这个问题。是的，尽管我写了这道谜题。&lt;/p&gt;
&lt;p&gt;这个答案在文章的末尾，但是首先，我想开头解释下为什么promise如此诡异和为什么我们当中很多人像新手和专家一样绊倒在这个上。我将会提供我认为是一个奇特的视角，这是一个怪异的技巧，这使得明白promise。是的，看过这些后我真的确信这些不是非常难。&lt;/p&gt;
&lt;p&gt;但首先，让我们挑战一些关于promise的常见问题。&lt;/p&gt;
&lt;h3 id=&quot;为什么会出现promise呢？&quot;&gt;&lt;a href=&quot;#为什么会出现promise呢？&quot; class=&quot;headerlink&quot; title=&quot;为什么会出现promise呢？&quot;&gt;&lt;/a&gt;为什么会出现promise呢？&lt;/h3&gt;&lt;p&gt;如果你阅读有关promise的文献，你可能经常会发现这个&lt;a href=&quot;https://medium.com/@wavded/managing-node-js-callback-hell-1fe03ba8baf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;糟糕的金字塔&lt;/a&gt;参考，一些逐渐出现到你的屏幕右下方的可怕回调代码。&lt;/p&gt;
&lt;p&gt;promise确实解决了这个问题，但他不仅仅是缩进。正如在“&lt;a href=&quot;http://youtu.be/hf1T_AONQJU&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;回调地域救赎&lt;/a&gt;”这个精彩的对话中所解释的那样，回调真正地问题是我们不能用return和throw语句。相反，我们程序的整个流程是这样：一个函数接着调用另一个函数。&lt;/p&gt;
&lt;p&gt;事实上，回调做的某些事甚至非常的险恶：他夺走了我们在编程语言常见的程序堆栈。编写没有堆栈的代码非常像没有制动踏板的汽车：直到你需要它但它并不在时你会意识到多么的需要它。&lt;/p&gt;
&lt;p&gt;promise的整个要点是当我们使用异步编程时将return、throw和堆栈用到了编程中。但是你必须知道如何正确使用promise以便利用它。&lt;/p&gt;
&lt;h3 id=&quot;新手错误&quot;&gt;&lt;a href=&quot;#新手错误&quot; class=&quot;headerlink&quot; title=&quot;新手错误&quot;&gt;&lt;/a&gt;新手错误&lt;/h3&gt;&lt;p&gt;有些人尝试解释promise成&lt;a href=&quot;http://andyshora.com/promises-angularjs-explained-as-cartoon.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一部漫画&lt;/a&gt;，或者一个名词：“噢，它是你可以传递的代表异步值的东西”。&lt;/p&gt;
&lt;p&gt;我没有发现那样的解释对我非常有帮助。对我来说，promise都是关于代码结构和流程的。所以我任务最好解决一些常见的错误，并展示如何去解决它们。“你现在是个新手、小孩，很快就会很专业”，在这个意思上我把这些问题称作新手错误。&lt;/p&gt;
&lt;p&gt;扯下题外话，“promise”对不同的人意味着许多不同的东西，但是这篇文章的目的仅仅是在讨论官方规范，像现代浏览器中的&lt;code&gt;window.Promise&lt;/code&gt;。但是不是所有的浏览器都有了&lt;code&gt;window.Promise&lt;/code&gt;，这里会有一个好的兼容方法（polyfill），看看这个最小的兼容规范库&lt;a href=&quot;https://github.com/calvinmetcalf/lie&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lie&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;新手错误1：糟糕的promise金字塔&quot;&gt;&lt;a href=&quot;#新手错误1：糟糕的promise金字塔&quot; class=&quot;headerlink&quot; title=&quot;新手错误1：糟糕的promise金字塔&quot;&gt;&lt;/a&gt;新手错误1：糟糕的promise金字塔&lt;/h4&gt;&lt;p&gt;看看这个有很多基于promise API的PouchDB，我看到了很多不好的promise模式。最常见的坏习惯是这个：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;remotedb.allDocs(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    include_docs: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    attachments: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; docs = result.rows;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    docs.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;element&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        localdb.put(element.doc).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(&lt;span class=&quot;string&quot;&gt;&#39;Pulled doc with id &#39;&lt;/span&gt; + element.doc._id + &lt;span class=&quot;string&quot;&gt;&#39; and added to local db.&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err.name == &lt;span class=&quot;string&quot;&gt;&#39;conflict&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                localdb.get(element.doc._id).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resp&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    localdb.remove(resp._id, resp._rev).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt; resp&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;// et cetera...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;是的，事实证明你在用promise好像它是回调，这很像使用电动砂光机在锉你的指甲，但是你可以做到。&lt;/p&gt;
&lt;p&gt;如果你认为这类错误仅限于完全的新手，你会惊讶我是从BlackBerry官方的开发者博客上拿到的代码！旧友的回调习惯很难改。（对开发这说声抱歉，但这个例子是有启发性的。）&lt;/p&gt;
&lt;p&gt;一种更好的方式是这样：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;remotedb.allDocs(...).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resultOfAllDocs&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; localdb.put(...);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resultOfPut&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; localdb.get(...);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resultOfGet&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; localdb.put(...);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个称之为组合promise，是promise超级强大的地方之一。每个函数仅在前一个函数运行完后利用其promise的返回结果调用，以此类推。&lt;/p&gt;
&lt;h4 id=&quot;新手错误2：WTF，我怎么在promise中使用forEach-？&quot;&gt;&lt;a href=&quot;#新手错误2：WTF，我怎么在promise中使用forEach-？&quot; class=&quot;headerlink&quot; title=&quot;新手错误2：WTF，我怎么在promise中使用forEach()？&quot;&gt;&lt;/a&gt;新手错误2：WTF，我怎么在promise中使用&lt;code&gt;forEach()&lt;/code&gt;？&lt;/h4&gt;&lt;p&gt;这是大多数人对promise了解开始奔溃的地方。一旦他们达到他们熟悉的forEach()循环（或者for循环，或者while循环），他们就不知道怎么与promise结合起来一起工作。所以他们写出像下面的代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 移除所有的docs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.allDocs(&amp;#123;include_docs: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result.rows.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;row&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        db.remove(row.doc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 天真的认为现在所有的docs已经移除了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码有什么问题呢？这个问题是第一个函数实际上返回&lt;code&gt;undefined&lt;/code&gt;，意味着第二个函数不会等待&lt;code&gt;db.remove()&lt;/code&gt;在所有docs调用完。事实上，它不会等待任何操作，并且可以在任何数量的docs被删除时执行。&lt;/p&gt;
&lt;p&gt;这是一个特别隐密的问题，因为你可能没有注意到有什么错误，假设PouchDB足够快地删除这些docs以便UI被更新。这个问题只能在奇怪的竞争条件下弹出，或者在某些浏览器中这样几乎不可能调试。&lt;/p&gt;
&lt;p&gt;所有这些不是你寻找的结构forEach()/for/while的内容不必关注。你仅需要使用Promise.all()：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;db.allDocs(&amp;#123;include_docs: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.all(result.rows.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;row&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; db.remove(row.doc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;arrayOfResults&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 现在所有的docs都已经移除了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里发生了什么？基础上Promise.all()把一系列的promise作为输入，然后只有当其他promise中的每一个都解决时给出另一个已解决的promise。它与for循环异步等效。&lt;/p&gt;
&lt;p&gt;Promise.all()将一个结果数组传递给下一个函数，这非常有用，例如如果您尝试从PouchDB获取多个东西。如果其所有子promise中的任何一个被拒绝，all()承诺也被拒绝，这更为有用。&lt;/p&gt;
&lt;h4 id=&quot;新手错误3：忘记添加-catch&quot;&gt;&lt;a href=&quot;#新手错误3：忘记添加-catch&quot; class=&quot;headerlink&quot; title=&quot;新手错误3：忘记添加.catch()&quot;&gt;&lt;/a&gt;新手错误3：忘记添加&lt;code&gt;.catch()&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;这是另一个常见错误。很自信他们的promise永远不会抛出错误，许多开发人员忘记在他们的代码中添加一个.catch()。不幸的是，这意味着任何抛出的错误将被吞下，你甚至不会在控制台中看到它们。这可能是一个真正的痛苦调试。&lt;/p&gt;
&lt;p&gt;为了避免这种讨厌的情况，我已经习惯了将以下代码添加到我的promise链中:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;somePromise().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; anotherPromise();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; yetAnotherPromise();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).catch(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log.bind(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即使你从来没预料过错误，添加一个catch()一直是谨慎的。如果你的假设是错误的，这将使你的生活更轻松。&lt;/p&gt;
&lt;h4 id=&quot;新手错误4：使用deferred&quot;&gt;&lt;a href=&quot;#新手错误4：使用deferred&quot; class=&quot;headerlink&quot; title=&quot;新手错误4：使用deferred&quot;&gt;&lt;/a&gt;新手错误4：使用&lt;code&gt;deferred&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;这是我一直我看到的错误，我不愿在这里重复一遍，因为担心，像Beetlejuice，只是调用它的名字将出现更多的例子。&lt;/p&gt;
&lt;p&gt;简而言之，promise有悠久的历史，并且JavaScript社区花了很长时间才能让他们正确。在早期，jQuery和Angular正在使用这种“延迟”模式，现在已经被ES6 Promise规范所取代，由实现这种规范“好的”库如Q，When，RSVP，Bluebird，Lie等等。&lt;/p&gt;
&lt;p&gt;所以如果你在你的代码中写这个词（我不会再重复一遍，第三次了），你做错了。以下是如何避免这种情况。&lt;/p&gt;
&lt;p&gt;首先，大多数promise库都为您提供了从第三方库中“引进”了promise。例如，Angular的$ q模块允许您使用$q.when()来包装非$q promise。所以Angular用户可以这样包装PouchDB promise：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$q.when(db.put(doc)).then( &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// &amp;lt;-- 这是你需要的所有代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另一种方法是使用&lt;a href=&quot;https://blog.domenic.me/the-revealing-constructor-pattern/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;揭示构造器模式（revealing constructor pattern）&lt;/a&gt;，对包装非promise api有用。比如包装一个像Node的fs.readFile()基于回调的API，你只需要这样做：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;myfile.txt&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, file&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reject(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resolve(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;comment&quot;&gt;/* .... */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完成！我们已经击败了可怕的def … Aha，抓住了自己。:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更多的关于为什么这是一个反模式，请查看&lt;a href=&quot;https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bluebird维基页面关于promise反模式&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;新手错误5：不使用return的副作用&quot;&gt;&lt;a href=&quot;#新手错误5：不使用return的副作用&quot; class=&quot;headerlink&quot; title=&quot;新手错误5：不使用return的副作用&quot;&gt;&lt;/a&gt;新手错误5：不使用&lt;code&gt;return&lt;/code&gt;的副作用&lt;/h4&gt;&lt;p&gt;这段代码出现什么错误呢？&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;somePromise().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    someOtherPromise();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 哎，我希望someOtherPromise（）已经解决了！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Spoiler警报：没有。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好的，这是一个很好的一点，谈论你需要了解promise的一切。真的，这是一个奇怪的伎俩，一旦你明白了，就会阻止我所说的所有错误。你准备好了吗？&lt;/p&gt;
&lt;p&gt;正如我之前所说，promise的魔力是他们给我们带回了我们宝贵的return和thrown。但这实际上是什么样的呢？&lt;/p&gt;
&lt;p&gt;每个promise给你一个then()方法（或者catch()，这只是then(null, …)的语法糖）。这里我们在一个then()函数里面：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;somePromise().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 我在一个then函数里面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这儿我们该怎么办？有三件事情：&lt;/p&gt;
&lt;p&gt;1、return另一个promise&lt;br&gt;2、return一个同步值（或者undefined）&lt;br&gt;3、throw一个同步错误&lt;/p&gt;
&lt;p&gt;就这些。一旦了解这个特招，你就明白了promise。那么让我们一次一个个地去看每个点。&lt;/p&gt;
&lt;h5 id=&quot;1、return另一个promise&quot;&gt;&lt;a href=&quot;#1、return另一个promise&quot; class=&quot;headerlink&quot; title=&quot;1、return另一个promise&quot;&gt;&lt;/a&gt;1、return另一个promise&lt;/h5&gt;&lt;p&gt;这是你在promise文献中看到的常见模式，如上面的“组合promise”示例：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getUserByName(&lt;span class=&quot;string&quot;&gt;&#39;nolan&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;user&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getUserAccountById(user.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;userAccount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 我获取了一个用户帐户！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意我return了第二个promise——return至关重要。如果我没有返回，那么getUserAccountById（）实际上会是一个副作用，下一个函数将会接收到undefined而不是userAccount。&lt;/p&gt;
&lt;h5 id=&quot;2、return一个同步值（或者undefined）&quot;&gt;&lt;a href=&quot;#2、return一个同步值（或者undefined）&quot; class=&quot;headerlink&quot; title=&quot;2、return一个同步值（或者undefined）&quot;&gt;&lt;/a&gt;2、return一个同步值（或者undefined）&lt;/h5&gt;&lt;p&gt;返回undefined通常是一个错误，但是返回一个同步值实际上是将同步代码转换为promise代码的好方法。例如，假设我们有一个用户的内存缓存。我们可以做的：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getUserByName(&lt;span class=&quot;string&quot;&gt;&#39;nolan&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;user&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (inMemoryCache[user.id]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inMemoryCache[user.id];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getUserAccountById(user.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;userAccount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 我获取了一个用户帐户！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不是很棒吗？第二个函数不关心userAccount是同步还是异步地获取，第一个函数可以自由返回同步或异步值。&lt;/p&gt;
&lt;p&gt;不幸的是，不方便的事实是JavaScript中的非返回函数在技术上返回undefined，这意味着当您意图返回某些东西时，很容易意外引入副作用。&lt;/p&gt;
&lt;p&gt;因此，我将它作为个人习惯，总是从then()函数return或throw。我建议你做同样的事情。&lt;/p&gt;
&lt;h5 id=&quot;3、throw一个同步错误&quot;&gt;&lt;a href=&quot;#3、throw一个同步错误&quot; class=&quot;headerlink&quot; title=&quot;3、throw一个同步错误&quot;&gt;&lt;/a&gt;3、throw一个同步错误&lt;/h5&gt;&lt;p&gt;说到throw，这是promise可以得到更棒的地方。假设我们要抛出同步错误，以防用户注销。这很容易：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getUserByName(&lt;span class=&quot;string&quot;&gt;&#39;nolan&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;user&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (user.isLoggedOut()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;user logged out!&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//抛出一个同步错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (inMemoryCache[user.id]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inMemoryCache[user.id]; &lt;span class=&quot;comment&quot;&gt;// 返回一个同步值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getUserAccountById(user.id); &lt;span class=&quot;comment&quot;&gt;// 返回一个promise！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;userAccount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 我获得一个用户帐户！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 嘘，出现错误！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果用户注销，我们的catch()将收到同步错误，如果有任何promise被拒绝，它将收到异步错误。同样，该函数不关心其获取的错误是同步还是异步。&lt;/p&gt;
&lt;p&gt;这是特别有用的，因为它可以帮助识别开发过程中的编码错误。例如，如果在then()函数内的任何一点，我们做一个JSON.parse()，如果JSON无效，它可能会引发同步错误。使用回调，这个错误会被吞噬，但是有了承诺，我们可以在我们的catch()函数中简单的处理它。&lt;/p&gt;
&lt;h3 id=&quot;高级错误&quot;&gt;&lt;a href=&quot;#高级错误&quot; class=&quot;headerlink&quot; title=&quot;高级错误&quot;&gt;&lt;/a&gt;高级错误&lt;/h3&gt;&lt;p&gt;好吧，现在你已经学会了让promise变得简单的一个技巧，让我们来谈谈边缘案例。当然，总是有边缘的情况。&lt;/p&gt;
&lt;p&gt;我把这些错误归类为“高级”，因为我只看过他们已经很熟悉promise的程序员了。但是，如果我们想要解决我在这篇文章开头提出的难题，我们将需要讨论它们。&lt;/p&gt;
&lt;h4 id=&quot;高级错误1：不知道Promise-resolve&quot;&gt;&lt;a href=&quot;#高级错误1：不知道Promise-resolve&quot; class=&quot;headerlink&quot; title=&quot;高级错误1：不知道Promise.resolve()&quot;&gt;&lt;/a&gt;高级错误1：不知道&lt;code&gt;Promise.resolve()&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;如上所示，promise对于将同步代码作为异步代码来说非常有用。但是，如果您发现自己键入很多：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resolve(someSynchronousValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这对于捕获任何同步错误也是非常有用的。这是非常有用的，我已经习惯了开始几乎所有的promise-returning的API方法，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;somePromiseAPI&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doSomethingThatMayThrow();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).then(&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只要记住：对于在某处几乎不可能调试的吞咽错误，任何可能同步throw的代码是一个很好的候选对象。但是如果你把所有内容都包含在Promise.resolve()中，那么你可以随时确定catch()。&lt;/p&gt;
&lt;p&gt;同样，有一个Promise.reject()可以用来返回一个立即被拒绝的承诺：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.reject(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;some awful error&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;高级错误2：catch-与then-null-并不完全一样&quot;&gt;&lt;a href=&quot;#高级错误2：catch-与then-null-并不完全一样&quot; class=&quot;headerlink&quot; title=&quot;高级错误2：catch()与then(null, ...)并不完全一样&quot;&gt;&lt;/a&gt;高级错误2：&lt;code&gt;catch()&lt;/code&gt;与&lt;code&gt;then(null, ...)&lt;/code&gt;并不完全一样&lt;/h4&gt;&lt;p&gt;我上面说的catch()只是语法糖。所以这两个片段是等价的：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;somePromise().catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 处理错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;somePromise().then(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 处理错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，这并不意味着以下两个片段是等效的：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;somePromise().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; someOtherPromise();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 处理错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;somePromise().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; someOtherPromise();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 处理错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果您想知道为什么它们不相等，请考虑如果第一个函数抛出错误会发生什么：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;somePromise().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;oh noes&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 捕捉到错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;somePromise().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;oh noes&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 没有捕获到错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;事实证明，当您使用then(resolveHandler, rejectHandler)格式时，如果resolveHandler本身抛出，rejectHandler将不会实际捕获错误。&lt;/p&gt;
&lt;p&gt;因此，我已经习惯了不要再使用then()第二个参数，并且总是喜欢catch()。例外情况是当我正在编写异步&lt;a href=&quot;http://mochajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocha&lt;/a&gt;测试时，我可以在其中写一个测试来确保抛出错误：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;it(&lt;span class=&quot;string&quot;&gt;&#39;should throw an error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; doSomethingThatThrows().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;I except an error!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        should.exist(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;说到这一点，&lt;a href=&quot;http://mochajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocha&lt;/a&gt;和&lt;a href=&quot;http://chaijs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chai&lt;/a&gt;是一个可爱的组合来测试承诺的API。 &lt;a href=&quot;https://github.com/pouchdb/plugin-seed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pouchdb-plugin-seed&lt;/a&gt;项目有一些可以让您开始的&lt;a href=&quot;https://github.com/pouchdb/plugin-seed/blob/master/test/test.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;示例测试&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;高级错误3：promise和promise工厂&quot;&gt;&lt;a href=&quot;#高级错误3：promise和promise工厂&quot; class=&quot;headerlink&quot; title=&quot;高级错误3：promise和promise工厂&quot;&gt;&lt;/a&gt;高级错误3：promise和promise工厂&lt;/h4&gt;&lt;p&gt;假设你想按顺序执行一系列的promise。那就是你想要的是Promise.all()，但是并不执行这些承诺。&lt;/p&gt;
&lt;p&gt;你可能会天真地写这样的东西：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;executeSequentially&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;promises&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; resut = &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    promises.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;promise&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = result.then(promise);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不幸的是，这不符合你的意图。您传递给executeSequentially()的promise仍将并行执行。&lt;/p&gt;
&lt;p&gt;发生这种情况的原因是，你不想在一系列promise上操作。根据promise规范，一旦promise创建，它将开始执行。所以你真正想要的是一系列的promise工厂：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;executeSequentially&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;promiseFactories&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    promiseFactories.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;promiseFactory&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = result.then(promiseFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我知道你在想什么：“这个Java程序员究竟是谁，他为什么在谈论工厂？”一个promise工厂很简单，但它只是一个返回promise的功能：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myPromiseFactory&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; somethingThatCreatesAPromise();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为什么这样工作？起作用的是因为一个promise的工厂直到被要求才产生promise。它的工作方式与then的功能相同 - 事实上，它是一回事！&lt;/p&gt;
&lt;p&gt;如果你看看上面的executeSequentially()函数，然后想象myPromiseFactory被替换为result.then(…)，那么希望一个灯泡会点醒你的大脑。在那一刻，你将会实现有promise的启示。&lt;/p&gt;
&lt;h4 id=&quot;高级错误4：好的，如果我想要两个promise的结果呢？&quot;&gt;&lt;a href=&quot;#高级错误4：好的，如果我想要两个promise的结果呢？&quot; class=&quot;headerlink&quot; title=&quot;高级错误4：好的，如果我想要两个promise的结果呢？&quot;&gt;&lt;/a&gt;高级错误4：好的，如果我想要两个promise的结果呢？&lt;/h4&gt;&lt;p&gt;通常情况下，一个promise将取决于另一个promise，但我们希望这两个promise的输出。例如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getUserByName(&lt;span class=&quot;string&quot;&gt;&#39;nolan&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;user&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getUserAccountById(user.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;userAccount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 危险，我也需要“user”对象！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;想要成为好的JavaScript开发人员，并避免使用金字塔，我们可能只将用户对象存储在更高作用域的变量中：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getUserByName(&lt;span class=&quot;string&quot;&gt;&#39;nolan&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user = result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getUserAccountById(user.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;userAccount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 好了，我同时拥有“user”和“userAccount”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个能够运行，但我个人觉得有点凑巧。我推荐的策略：放开你的先入为主并拥抱金字塔：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getUserByName(&lt;span class=&quot;string&quot;&gt;&#39;nolan&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;user&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getUerAccountById(user.id).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;userAccount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 好了，我同时拥有“user”和“userAccount”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;…至少，暂时的如果缩进成为一个问题，那么您可以做JavaScript开发人员自古以来一直在做的工作，并将该功能提取到一个命名的函数中：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onGetUserAndUserAccount&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;user, userAccount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; doSomething(user, userAccount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onGetUser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;user&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getUserAccountById(user.id).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;userAccount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; onGetUserAndUserAccount(user, userAccount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getUserByName(&lt;span class=&quot;string&quot;&gt;&#39;nolan&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(onGetUser)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 在这一点上，doSomething()完成，我们回到0缩进&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;随着您的promise代码开始变得越来越复杂，您可能会发现自己将越来越多的函数提取到命名函数中。我发现这会导致非常美观的代码，可能看起来像这样：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;putYourRightFootIn()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(putYourRightFootOut)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(putYourRightFootIn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(shakeItAllAbout);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这就是promise的一切。&lt;/p&gt;
&lt;h4 id=&quot;高级错误5：promise破坏&quot;&gt;&lt;a href=&quot;#高级错误5：promise破坏&quot; class=&quot;headerlink&quot; title=&quot;高级错误5：promise破坏&quot;&gt;&lt;/a&gt;高级错误5：promise破坏&lt;/h4&gt;&lt;p&gt;最后，当我介绍上面的promise难题时，这是我提到的错误。这是一个非常深奥的用例，它可能永远不会出现在你的代码中，但它确实让我感到惊讶。&lt;/p&gt;
&lt;p&gt;你认为这个代码打印出来什么？&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve(&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;).then(&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve(&lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;)).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你认为打印出来bar，你是错误的。它实际上打印出foo！&lt;/p&gt;
&lt;p&gt;发生这种情况的原因是因为当你传递then()一个非函数（如承诺）时，它实际上将它解释为then(null)，这导致先前的promise的结果通过。你可以自己测试一下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve(&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;).then(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;添加尽可能多的then(null)；它仍然会打印foo。&lt;/p&gt;
&lt;p&gt;这实际上回到了我说promise vs promise工厂的前一点。简而言之，您可以直接将promise直接传递给then()方法，但不会执行您的想法。那么then()应该是一个函数，所以很可能你打算做：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve(&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve(&lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这将像我们预期的那样打印bar。&lt;/p&gt;
&lt;p&gt;所以只是提醒自己：总是传递一个函数到then()！&lt;/p&gt;
&lt;h3 id=&quot;解决谜题&quot;&gt;&lt;a href=&quot;#解决谜题&quot; class=&quot;headerlink&quot; title=&quot;解决谜题&quot;&gt;&lt;/a&gt;解决谜题&lt;/h3&gt;&lt;p&gt;现在我们已经学到了所有有关promise（或接近它）的知识，我们应该能够解决我最初在这篇文章开始时提出的难题。&lt;/p&gt;
&lt;p&gt;这是每道题的答案，以图形格式，所以你可以更好地可视化它：&lt;/p&gt;
&lt;h4 id=&quot;谜题1&quot;&gt;&lt;a href=&quot;#谜题1&quot; class=&quot;headerlink&quot; title=&quot;谜题1&quot;&gt;&lt;/a&gt;谜题1&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; doSomethingElse();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(finalHandler);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;答案：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doSomething&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-----------------|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  doSomethingElse(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  |------------------|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     finalHandler(resultOfDoSomethingElse)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     |------------------|&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;谜题2&quot;&gt;&lt;a href=&quot;#谜题2&quot; class=&quot;headerlink&quot; title=&quot;谜题2&quot;&gt;&lt;/a&gt;谜题2&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  doSomethingElse();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(finalHandler);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;答案：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doSomething&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-----------------|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  doSomethingElse(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  |------------------|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  finalHandler(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  |------------------|&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;谜题3&quot;&gt;&lt;a href=&quot;#谜题3&quot; class=&quot;headerlink&quot; title=&quot;谜题3&quot;&gt;&lt;/a&gt;谜题3&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doSomething().then(doSomethingElse())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(finalHandler);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;答案：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doSomething&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-----------------|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doSomethingElse(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|---------------------------------|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  finalHandler(resultOfDoSomething)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  |------------------|&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;谜题4&quot;&gt;&lt;a href=&quot;#谜题4&quot; class=&quot;headerlink&quot; title=&quot;谜题4&quot;&gt;&lt;/a&gt;谜题4&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doSomething().then(doSomethingElse)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(finalHandler);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;答案：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doSomething&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-----------------|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  doSomethingElse(resultOfDoSomething)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  |------------------|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     finalHandler(resultOfDoSomethingElse)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     |------------------|&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果这些答案仍然没有弄明白，那么我建议您重新阅读这篇文章，或者定义doSomething()和doSomethingElse()方法，并在浏览器中自行尝试。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：对于这些例子，我假设doSomething()和doSomethingElse()都返回promise，并且这些promise代表了JavaScript事件循环之外的事情（例如IndexedDB，network，setTimeout），这就是为什么它们在适当时显示为并发。这是一个&lt;a href=&quot;http://jsbin.com/tuqukakawo/1/edit?js,console,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSBin&lt;/a&gt;来演示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于更高级的promise使用，请查看我的&lt;a href=&quot;https://gist.github.com/nolanlawson/6ce81186421d2fa109a4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;promise提示表&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;关于promise的后话&quot;&gt;&lt;a href=&quot;#关于promise的后话&quot; class=&quot;headerlink&quot; title=&quot;关于promise的后话&quot;&gt;&lt;/a&gt;关于promise的后话&lt;/h3&gt;&lt;p&gt;promise是伟大的。如果您仍然使用回调，我强烈建议您切换到承诺。您的代码将变得更小，更优雅，更容易理解。&lt;/p&gt;
&lt;p&gt;如果你不相信我，这里就是证明：&lt;a href=&quot;https://t.co/hRyc6ENYGC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PouchDB的map/reduce模块的重构&lt;/a&gt;使用promise替代callback。结果：290次插入，555次删除。&lt;/p&gt;
&lt;p&gt;顺便说一下，写那个讨厌的回调代码的人是…我！所以这是作为我的promise的原始力量的第一课，我感谢其他PouchDB贡献者一路上教导我。&lt;/p&gt;
&lt;p&gt;话虽如此，promise并不完美。这是真的，他们比回调更好，但这是一个很好的说，一个打在肠道比一个踢在牙齿更好。当然，一个比另一个更好，但是如果你有一个选择，你可能会避免它们。&lt;/p&gt;
&lt;p&gt;虽然优于回调，promise仍然难以理解和容易出错，这表现在我觉得不得不写这篇博文。新手和专家都会经常混淆这些东西，真的，这不是他们的错。问题在于promise虽然与我们在同步代码中使用的模式类似，但却是一个合适的替代品，但不完全相同。&lt;/p&gt;
&lt;p&gt;实际上，你不应该学习一堆神秘的规则和新的API来做这些事情，在同步的世界里，你可以很好地完成熟悉的模式，如return，catch，throw和for-loop。不应该有两个平行并行的系统，你必须始终保持串行。&lt;/p&gt;
&lt;h3 id=&quot;期待async-await&quot;&gt;&lt;a href=&quot;#期待async-await&quot; class=&quot;headerlink&quot; title=&quot;期待async/await&quot;&gt;&lt;/a&gt;期待async/await&lt;/h3&gt;&lt;p&gt;这就是我在&lt;a href=&quot;http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“用ES7驯服异步野兽”&lt;/a&gt;中所做的一点，我在那里探索了ES7 async/await关键字，以及如何将承诺更深入地融入到语言中。 ES7可以让我们使用真正的try / catch / return关键字，就像我们在CS 101中学到一样，而不必编写伪同步代码（使用一种类似于catch的假捕获()方法，但不是真的）。&lt;/p&gt;
&lt;p&gt;这是JavaScript作为一种语言的巨大福音。因为最后，只要在我们犯了错误时我们的工具不会告诉我们，这些承诺的反模式仍然会继续发生。&lt;/p&gt;
&lt;p&gt;以JavaScript的历史为例，我认为说&lt;a href=&quot;http://jslint.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSLint&lt;/a&gt;和&lt;a href=&quot;http://jshint.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSHint&lt;/a&gt;比&lt;a href=&quot;http://amzn.com/0596517742&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《JavaScript: The Good Parts》&lt;/a&gt;更好的服务于社区，即使它们有效地包含了相同的信息。被告知你刚刚在你的代码中所犯的错误，而不是阅读一本你试图了解别人的错误的书。&lt;/p&gt;
&lt;p&gt;ES7 aynsc/await的美妙之处在于，在大多数情况下，您的错误会将自己显示为语法/编译器错误，而不是微妙的运行时错误。在此之前，掌握了ES5和ES6中的promise能力，以及如何正确使用它们。&lt;/p&gt;
&lt;p&gt;所以，当我认识到，像《JavaScript：The Good Parts》，这个博客文章只能有一个有限的影响，当你看到他们犯同样的错误希望你可以指出。因为我们还有太多人只需要承认：“我有promise的问题！”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更新：有人指出，Bluebird 3.0将打印出可以防止我在这篇文章中发现的许多错误的警告。所以使用Bluebird是另一个很好的选择，而我们期待ES7！&lt;br&gt;现在ES 2017已经发布了规范，实现了async/await特性，激动人心！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇文章翻译自 &lt;a href=&quot;https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript开发者们，现在得承认：我们有一个关于promise的问题。&lt;/p&gt;
&lt;p&gt;不，这不是promise自身问题。采用&lt;a href=&quot;https://promisesaplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A+ 
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Web开发演化</title>
    <link href="http://yoursite.com/2017/10/07/the-revolution-of-web-development-2016/"/>
    <id>http://yoursite.com/2017/10/07/the-revolution-of-web-development-2016/</id>
    <published>2017-10-07T12:40:53.000Z</published>
    <updated>2017-10-29T11:53:39.405Z</updated>
    
    <content type="html">&lt;p&gt;随着时间推移，web开发带来了戏剧性变化，现代化web开发包含了一系列的工具、方法和概念。这些工具可能很复杂，但可以创建以前不可能实现的具有更快的开发速度和更好的可维护性的强大的应用程序。&lt;/p&gt;
&lt;h2 id=&quot;Web开发简史&quot;&gt;&lt;a href=&quot;#Web开发简史&quot; class=&quot;headerlink&quot; title=&quot;Web开发简史&quot;&gt;&lt;/a&gt;Web开发简史&lt;/h2&gt;&lt;h3 id=&quot;Web-1-0（1991-2001）&quot;&gt;&lt;a href=&quot;#Web-1-0（1991-2001）&quot; class=&quot;headerlink&quot; title=&quot;Web 1.0（1991-2001）&quot;&gt;&lt;/a&gt;Web 1.0（1991-2001）&lt;/h3&gt;&lt;p&gt;这段时期典型的站点是由静态的html页面构成，在全球的城市或大学页面上托管，采用FrontPage、DreamWeaver或Notepad写成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web1.0.png&quot; alt=&quot;2017-10-11-web1.0&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-1-0：技术&quot;&gt;&lt;a href=&quot;#Web-1-0：技术&quot; class=&quot;headerlink&quot; title=&quot;Web 1.0：技术&quot;&gt;&lt;/a&gt;Web 1.0：技术&lt;/h4&gt;&lt;p&gt;CGI-BIN和Perl&lt;br&gt;PHP和ASP&lt;/p&gt;
&lt;h4 id=&quot;Web-1-0：交互&quot;&gt;&lt;a href=&quot;#Web-1-0：交互&quot; class=&quot;headerlink&quot; title=&quot;Web 1.0：交互&quot;&gt;&lt;/a&gt;Web 1.0：交互&lt;/h4&gt;&lt;p&gt;HTML表单&lt;br&gt;Java applets&lt;br&gt;ActiveX controls&lt;br&gt;动态HTML（DHTML）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web1.0-interactivity.png&quot; alt=&quot;2017-10-11-web1.0-interactivity&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-1-0：浏览器&quot;&gt;&lt;a href=&quot;#Web-1-0：浏览器&quot; class=&quot;headerlink&quot; title=&quot;Web 1.0：浏览器&quot;&gt;&lt;/a&gt;Web 1.0：浏览器&lt;/h4&gt;&lt;p&gt;Mosaic&lt;br&gt;Netscape&lt;br&gt;Internet Explorer&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web1.0-browsers.png&quot; alt=&quot;2017-10-11-web1.0-browsers&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-1-0：代码共享&quot;&gt;&lt;a href=&quot;#Web-1-0：代码共享&quot; class=&quot;headerlink&quot; title=&quot;Web 1.0：代码共享&quot;&gt;&lt;/a&gt;Web 1.0：代码共享&lt;/h4&gt;&lt;p&gt;脚本网站&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web1.0-code-sharing.png&quot; alt=&quot;2017-10-11-web1.0-code-sharing&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-1-0：里程碑&quot;&gt;&lt;a href=&quot;#Web-1-0：里程碑&quot; class=&quot;headerlink&quot; title=&quot;Web 1.0：里程碑&quot;&gt;&lt;/a&gt;Web 1.0：里程碑&lt;/h4&gt;&lt;p&gt;HTML、CSS和JavaScript发明&lt;br&gt;Java和Flash发明&lt;br&gt;采用img和iframe标签实现的多媒体&lt;br&gt;blink和marquee标签&lt;/p&gt;
&lt;h3 id=&quot;Web-2-0（2001-2010）&quot;&gt;&lt;a href=&quot;#Web-2-0（2001-2010）&quot; class=&quot;headerlink&quot; title=&quot;Web 2.0（2001-2010）&quot;&gt;&lt;/a&gt;Web 2.0（2001-2010）&lt;/h3&gt;&lt;p&gt;这个阶段的网站采用服务端渲染页面，MySQL数据库，运行在J2EE、Rails或者PHP上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web2.0.png&quot; alt=&quot;2017-10-11-web2.0&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-2-0：服务端技术&quot;&gt;&lt;a href=&quot;#Web-2-0：服务端技术&quot; class=&quot;headerlink&quot; title=&quot;Web 2.0：服务端技术&quot;&gt;&lt;/a&gt;Web 2.0：服务端技术&lt;/h4&gt;&lt;p&gt;J2EE、ASP.NET、Rails、Django、LAMP&lt;br&gt;单独架构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web2.0-server-technologies.png&quot; alt=&quot;2017-10-11-web2.0-server-technologies&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-2-0：客户端技术&quot;&gt;&lt;a href=&quot;#Web-2-0：客户端技术&quot; class=&quot;headerlink&quot; title=&quot;Web 2.0：客户端技术&quot;&gt;&lt;/a&gt;Web 2.0：客户端技术&lt;/h4&gt;&lt;p&gt;Ajax（Asynchronous JavaScript And XML）&lt;br&gt;MOOTOOLS（A COMPACT JAVASCRIPT FRAMEWORK）&lt;br&gt;prototype&lt;br&gt;jQuery&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web2.0-client-technologies.png&quot; alt=&quot;2017-10-11-web2.0-client-technologies&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-2-0：浏览器&quot;&gt;&lt;a href=&quot;#Web-2-0：浏览器&quot; class=&quot;headerlink&quot; title=&quot;Web 2.0：浏览器&quot;&gt;&lt;/a&gt;Web 2.0：浏览器&lt;/h4&gt;&lt;p&gt;IE6&lt;br&gt;Mozilla（Firefox）&lt;br&gt;IE6 → IE8&lt;br&gt;ACID测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web2.0-browsers.png&quot; alt=&quot;2017-10-11-web2.0-browsers&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-2-0：富应用&quot;&gt;&lt;a href=&quot;#Web-2-0：富应用&quot; class=&quot;headerlink&quot; title=&quot;Web 2.0：富应用&quot;&gt;&lt;/a&gt;Web 2.0：富应用&lt;/h4&gt;&lt;p&gt;插件：Flash、Silverlight&lt;br&gt;Web组件框架：GWT、EXT、YUI&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web2.0-rich-interactive-applications.png&quot; alt=&quot;2017-10-11-web2.0-rich-interactive-applications&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-2-0：代码共享&quot;&gt;&lt;a href=&quot;#Web-2-0：代码共享&quot; class=&quot;headerlink&quot; title=&quot;Web 2.0：代码共享&quot;&gt;&lt;/a&gt;Web 2.0：代码共享&lt;/h4&gt;&lt;p&gt;Sourceforge&lt;br&gt;Google Code&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web2.0-code-sharing.png&quot; alt=&quot;2017-10-11-web2.0-code-sharing&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-2-0：数据传输&quot;&gt;&lt;a href=&quot;#Web-2-0：数据传输&quot; class=&quot;headerlink&quot; title=&quot;Web 2.0：数据传输&quot;&gt;&lt;/a&gt;Web 2.0：数据传输&lt;/h4&gt;&lt;p&gt;XML&lt;br&gt;SOAP/WS-*&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-web2.0-data-transfer.gif&quot; alt=&quot;2017-10-11-web2.0-data-transfer&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Web-2-0：里程碑&quot;&gt;&lt;a href=&quot;#Web-2-0：里程碑&quot; class=&quot;headerlink&quot; title=&quot;Web 2.0：里程碑&quot;&gt;&lt;/a&gt;Web 2.0：里程碑&lt;/h4&gt;&lt;p&gt;AJAX, JSON&lt;br&gt;Mobile&lt;br&gt;Stack Overflow!&lt;/p&gt;
&lt;h3 id=&quot;现代时期（2010-至今）&quot;&gt;&lt;a href=&quot;#现代时期（2010-至今）&quot; class=&quot;headerlink&quot; title=&quot;现代时期（2010-至今）&quot;&gt;&lt;/a&gt;现代时期（2010-至今）&lt;/h3&gt;&lt;p&gt;这个时期网站典型的特点是客户端JS、JSON API、跑在云服务上基于Node构建的微服务、NoSQL数据库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-modern-era.png&quot; alt=&quot;2017-10-11-modern-era&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;现代时期：服务端技术&quot;&gt;&lt;a href=&quot;#现代时期：服务端技术&quot; class=&quot;headerlink&quot; title=&quot;现代时期：服务端技术&quot;&gt;&lt;/a&gt;现代时期：服务端技术&lt;/h4&gt;&lt;p&gt;express+node+mongodb&lt;br&gt;Play Framework（build web applications with Java &amp;amp; Scala）&lt;/p&gt;
&lt;p&gt;amazon web services&lt;br&gt;HEROKU&lt;br&gt;Microsoft Azure&lt;/p&gt;
&lt;p&gt;Flask&lt;br&gt;Dropwizard&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-modern-era-server-technologies.png&quot; alt=&quot;2017-10-11-modern-era-server-technologies&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;现代时期：客户端技术&quot;&gt;&lt;a href=&quot;#现代时期：客户端技术&quot; class=&quot;headerlink&quot; title=&quot;现代时期：客户端技术&quot;&gt;&lt;/a&gt;现代时期：客户端技术&lt;/h4&gt;&lt;p&gt;BACKBONE.JS、ANGULARJS&lt;br&gt;ember.js、React&lt;br&gt;Bootstrap、Foundation、Semantic UI&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-modern-era-client-technologies.png&quot; alt=&quot;2017-10-11-modern-era-client-technologies&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;现代时期：浏览器&quot;&gt;&lt;a href=&quot;#现代时期：浏览器&quot; class=&quot;headerlink&quot; title=&quot;现代时期：浏览器&quot;&gt;&lt;/a&gt;现代时期：浏览器&lt;/h4&gt;&lt;p&gt;Chrome、IE → Edge、Firefox、Safari&lt;br&gt;长青版本（Can I use）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-modern-era-browsers.png&quot; alt=&quot;2017-10-11-modern-era-browsers&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;现代时期：HTML5&quot;&gt;&lt;a href=&quot;#现代时期：HTML5&quot; class=&quot;headerlink&quot; title=&quot;现代时期：HTML5&quot;&gt;&lt;/a&gt;现代时期：HTML5&lt;/h4&gt;&lt;p&gt;Web Workers&lt;br&gt;HTML(5)、CSS(3)、Websockets、WebGL、FLEX&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-modern-era-html5.png&quot; alt=&quot;2017-10-11-modern-era-html5&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;现代时期：代码共享&quot;&gt;&lt;a href=&quot;#现代时期：代码共享&quot; class=&quot;headerlink&quot; title=&quot;现代时期：代码共享&quot;&gt;&lt;/a&gt;现代时期：代码共享&lt;/h4&gt;&lt;p&gt;github&lt;br&gt;npm&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-modern-era-code-sharing.png&quot; alt=&quot;2017-10-11-modern-era-code-sharing&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;现代时期：数据传输&quot;&gt;&lt;a href=&quot;#现代时期：数据传输&quot; class=&quot;headerlink&quot; title=&quot;现代时期：数据传输&quot;&gt;&lt;/a&gt;现代时期：数据传输&lt;/h4&gt;&lt;p&gt;JSON over HTTP&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-modern-era-data-transfer.png&quot; alt=&quot;2017-10-11-modern-era-data-transfer&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;现代时期：里程碑&quot;&gt;&lt;a href=&quot;#现代时期：里程碑&quot; class=&quot;headerlink&quot; title=&quot;现代时期：里程碑&quot;&gt;&lt;/a&gt;现代时期：里程碑&lt;/h4&gt;&lt;p&gt;Node.js&lt;br&gt;插件之死（Flash）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-modern-era-milestones.png&quot; alt=&quot;2017-10-11-modern-era-milestones&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Web技术时间线&quot;&gt;&lt;a href=&quot;#Web技术时间线&quot; class=&quot;headerlink&quot; title=&quot;Web技术时间线&quot;&gt;&lt;/a&gt;Web技术时间线&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-timeline-of-web-technologies.png&quot; alt=&quot;Timeline of Web Technologies&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;JavaScript简史&quot;&gt;&lt;a href=&quot;#JavaScript简史&quot; class=&quot;headerlink&quot; title=&quot;JavaScript简史&quot;&gt;&lt;/a&gt;JavaScript简史&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1995：网景公司Brendan Eich发明JavaScript语言&lt;/li&gt;
&lt;li&gt;1999：ES3规范敲定；微软发明XMLHttpRequest&lt;/li&gt;
&lt;li&gt;2001：Douglas Crockford推广JSON格式&lt;/li&gt;
&lt;li&gt;2005：推广“AJAX”术语&lt;/li&gt;
&lt;li&gt;2006：John Resig发明jQuery&lt;/li&gt;
&lt;li&gt;2008：Douglas Crockford出版《JavaScript：the Good Parts》&lt;/li&gt;
&lt;li&gt;2009：ES5规范敲定；Ryan Dahl发明Node.js&lt;/li&gt;
&lt;li&gt;2010：Underscore.js、Backbone.js、由Jeremy Ashkenas发明CoffeeScript&lt;/li&gt;
&lt;li&gt;2015：ES6规范敲定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-ecmascript-releases.png&quot; alt=&quot;2017-10-11-ecmascript-releases&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;现代Web开发景观&quot;&gt;&lt;a href=&quot;#现代Web开发景观&quot; class=&quot;headerlink&quot; title=&quot;现代Web开发景观&quot;&gt;&lt;/a&gt;现代Web开发景观&lt;/h2&gt;&lt;h3 id=&quot;现代Web开发：这是什么？&quot;&gt;&lt;a href=&quot;#现代Web开发：这是什么？&quot; class=&quot;headerlink&quot; title=&quot;现代Web开发：这是什么？&quot;&gt;&lt;/a&gt;现代Web开发：这是什么？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-modern-web-devlopment-wat-is-this.png&quot; alt=&quot;2017-10-11-modern-web-devlopment-wat-is-this&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;JavaScript-Client挑战&quot;&gt;&lt;a href=&quot;#JavaScript-Client挑战&quot; class=&quot;headerlink&quot; title=&quot;JavaScript/Client挑战&quot;&gt;&lt;/a&gt;JavaScript/Client挑战&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;JavaScript设计的目的是当你放在页面上能让它跳动起来。脚本通常是一行。我们认为10行脚本是非常正常的，100行脚本是巨大的，1000行脚本闻所未闻。这门语言最初绝不是用来搞大型的编程，我们的实现方案、性能指标都是未知的。&lt;br&gt;前微软IE/JS开发者Eric Lippert&lt;br&gt;&lt;a href=&quot;http://programmers.stackexchange.com/a/221658/214387&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://programmers.stackexchange.com/a/221658/214387&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;无内置的模块定义系统&lt;/li&gt;
&lt;li&gt;无封装&lt;/li&gt;
&lt;li&gt;与大多数语言不同的采用原型继承系统&lt;/li&gt;
&lt;li&gt;无静态类型的声明或编译&lt;/li&gt;
&lt;li&gt;动态修改的对象和数据&lt;/li&gt;
&lt;li&gt;最小标准库&lt;/li&gt;
&lt;li&gt;浏览器功能变化&lt;/li&gt;
&lt;li&gt;文档布局模型应用在应用程序布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;JavaScript-Client开发目标&quot;&gt;&lt;a href=&quot;#JavaScript-Client开发目标&quot; class=&quot;headerlink&quot; title=&quot;JavaScript/Client开发目标&quot;&gt;&lt;/a&gt;JavaScript/Client开发目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;网络字节最小化&lt;/li&gt;
&lt;li&gt;处理浏览器兼容性问题&lt;/li&gt;
&lt;li&gt;填补JS标准库与语言规范间的空白&lt;/li&gt;
&lt;li&gt;在应用程序之间重用和共享代码&lt;/li&gt;
&lt;li&gt;构建越来越复杂的大型浏览器端应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;人们认为写客户端应用程序很容易，这就是人们出现混乱、没有组合、成千上万条意大利面条式丑陋代码境况的原因。在浏览器中编写应用程序应该与建立数据或者创建一个服务层一样受尊重。对前端代码缺乏尊重是前端项目出现糟糕代码的最大原因。&lt;br&gt;是的，你将需要使用工具webpack、jspm、browserify配合babel、typescript以及postcss、less、scss来开发。就像你为桌面应用程序编写代码一样，你可能至少需要安装一个IDE并且可能需要几个库。···得到一个Java应用程序需要些什么呢？Maven，一些构建工具，一些其他的工具，理解组件/类的层级？使用任何新的工具都不容易。&lt;br&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=11782234&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://news.ycombinator.com/item?id=11782234&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;现代工具：语言-编译器&quot;&gt;&lt;a href=&quot;#现代工具：语言-编译器&quot; class=&quot;headerlink&quot; title=&quot;现代工具：语言/编译器&quot;&gt;&lt;/a&gt;现代工具：语言/编译器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES6/ES2015(+)&lt;ul&gt;
&lt;li&gt;当前版本语言规范&lt;/li&gt;
&lt;li&gt;浏览器和JS引擎跟进实现&lt;/li&gt;
&lt;li&gt;分阶段发展未来提议的语言特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Babel&lt;ul&gt;
&lt;li&gt;基于插件的JavaScript混合编译器&lt;/li&gt;
&lt;li&gt;广泛用于编译ES6等语言功能成向后兼容的ES5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TypeScript&lt;ul&gt;
&lt;li&gt;来自微软的静态类型ES6超集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SASS/LESS&lt;ul&gt;
&lt;li&gt;具有变量、控制流程、选择器嵌套能编译成css的语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;现代工具：代码共享&quot;&gt;&lt;a href=&quot;#现代工具：代码共享&quot; class=&quot;headerlink&quot; title=&quot;现代工具：代码共享&quot;&gt;&lt;/a&gt;现代工具：代码共享&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;模块格式&lt;ul&gt;
&lt;li&gt;AMD（异步模块定义）：用于异步浏览器加载&lt;/li&gt;
&lt;li&gt;CommonJS：用于Node从文件系统中加载内容&lt;/li&gt;
&lt;li&gt;ES6：用于静态分析用于构建优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;包装和执行&lt;ul&gt;
&lt;li&gt;Node.js&lt;ul&gt;
&lt;li&gt;浏览器外的JavaScript运行环境&lt;/li&gt;
&lt;li&gt;V8引擎，来自Chrome，添加了一些额外的系统交互交口（文件系统、套接字…）&lt;/li&gt;
&lt;li&gt;所有的服务端/构建工具都用JavaScript编写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NPM&lt;ul&gt;
&lt;li&gt;采用Node的包管理器&lt;/li&gt;
&lt;li&gt;创建、安装、管理JavaScript包和依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;现代工具：构建工具&quot;&gt;&lt;a href=&quot;#现代工具：构建工具&quot; class=&quot;headerlink&quot; title=&quot;现代工具：构建工具&quot;&gt;&lt;/a&gt;现代工具：构建工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;构建步骤&lt;ul&gt;
&lt;li&gt;编译：将ES6/TypeScript转成兼容性好的ES5&lt;/li&gt;
&lt;li&gt;合并：把多个文件合成一个输出文件&lt;/li&gt;
&lt;li&gt;压缩：移除空白/注释，重命名变量长度&lt;/li&gt;
&lt;li&gt;代码分块：将功能块分成单独的包以便按需加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;任务运行器&lt;ul&gt;
&lt;li&gt;Grunt：通过插件配置分开独立的任务&lt;/li&gt;
&lt;li&gt;Gulp：通过一系列转换步骤得到的管道数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块构建器&lt;ul&gt;
&lt;li&gt;Browserify：将CommonJS格式模块转成浏览器可用的代码&lt;/li&gt;
&lt;li&gt;Webpack：将任何内容转成模块，主要用于浏览器（AMD/CJS/ES6 modules, CSS, images, …）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;现代工具：开发体验&quot;&gt;&lt;a href=&quot;#现代工具：开发体验&quot; class=&quot;headerlink&quot; title=&quot;现代工具：开发体验&quot;&gt;&lt;/a&gt;现代工具：开发体验&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;File watching / live reloading&lt;ul&gt;
&lt;li&gt;监听源文件的改变，重新编译，可能重新加载页面内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sourcemaps&lt;ul&gt;
&lt;li&gt;调试信息将源文件的行与构建输出文件的行相关联。允许在浏览器中调试“原始”代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Browser dev tools&lt;ul&gt;
&lt;li&gt;元素检查，样式检查，脚本调试，网络流量监控&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hot reloading&lt;ul&gt;
&lt;li&gt;快速交换重新编译的代码模块&lt;/li&gt;
&lt;li&gt;实时编辑/所见即所得的开发体验&lt;/li&gt;
&lt;li&gt;适合函数式编程技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;现代工具：测试&quot;&gt;&lt;a href=&quot;#现代工具：测试&quot; class=&quot;headerlink&quot; title=&quot;现代工具：测试&quot;&gt;&lt;/a&gt;现代工具：测试&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Test runners&lt;ul&gt;
&lt;li&gt;Mocha, Jasmine, Tape, Jest（主要用于浏览器以外环境）&lt;/li&gt;
&lt;li&gt;Karma（在真实的浏览器环境里）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking and test behavior&lt;ul&gt;
&lt;li&gt;Chai, Expect（测试断言）&lt;/li&gt;
&lt;li&gt;Sinon, JSDOM（网络/功能/DOM模拟）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integration testing&lt;ul&gt;
&lt;li&gt;Selenium（通过驱动浏览器进行集成测试）&lt;/li&gt;
&lt;li&gt;PhantomJS（采用虚拟浏览器进行浏览器环境自动单元测试）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linting: ESLint&lt;/li&gt;
&lt;li&gt;Static typing: Flow&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;现代工具：核心类库&quot;&gt;&lt;a href=&quot;#现代工具：核心类库&quot; class=&quot;headerlink&quot; title=&quot;现代工具：核心类库&quot;&gt;&lt;/a&gt;现代工具：核心类库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Express&lt;ul&gt;
&lt;li&gt;node环境HTTP服务端框架&lt;/li&gt;
&lt;li&gt;中间件管道允许灵活处理请求/响应生命周期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jQuery&lt;ul&gt;
&lt;li&gt;DOM处理和AJAX请求；抽象各浏览间的差异&lt;/li&gt;
&lt;li&gt;单一广泛使用的JS类库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&amp;#39;#someId&amp;#39;).toogleClass(&amp;#39;active&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Underscore/Lodash&lt;ul&gt;
&lt;li&gt;非常有用的功能函数类库&lt;/li&gt;
&lt;li&gt;Loadsh是Underscore的一个优化分支，额外添加了许多函数&lt;/li&gt;
&lt;li&gt;数组（_.first），集合（_.forEach），对象（_.pick），字符串（_.camelCase），函数（_.debounce）等功能函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;JavaScript框架&quot;&gt;&lt;a href=&quot;#JavaScript框架&quot; class=&quot;headerlink&quot; title=&quot;JavaScript框架&quot;&gt;&lt;/a&gt;JavaScript框架&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;每个框架都可以被看作是试图说“编写webapp的最困难的部分是$X，所以这里有一些代码让它更容易”。&lt;br&gt;当一个开发者“编写webapp最难的部分是实现双向数据绑定”，你可以使用knonchout.js，这个框架基本上能做90%的工作。···同样，Backbone感觉就是用来实现从一个REST API中获取并且持久化数据模型、客户端路由的产物，它基本上能做所有事。知道怎么将你获取的数据编程html内容（显然）容易，但是数据模型模型很难，所以这个工具能够帮助你。&lt;br&gt;如果您认为编写webapps的最大问题是Javascript不是Java、Ember不是Ruby，那么Angular就是你所需要的。（开玩笑了，我对这些框架并不熟悉）。等等，每个人都对最难处理的问题有自己的看法。&lt;br&gt;写webapp最难的是非确定的表现和不清晰的数据流动，React+Flux就是用来解决这些问题的。如果你已经在一个大型的Knockout或者Backbone项目上工作，你可能会倾向于同意。&lt;br&gt;&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/39wsfi/what_are_pros_and_cons_of_using_reactjsflux/cs7msvp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reddit /u/Cody_Chaos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201710/2017-10-11-javascript-frameworks.jpg&quot; alt=&quot;2017-10-11-javascript-frameworks&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;JavaScript框架？！？&quot;&gt;&lt;a href=&quot;#JavaScript框架？！？&quot; class=&quot;headerlink&quot; title=&quot;JavaScript框架？！？&quot;&gt;&lt;/a&gt;JavaScript框架？！？&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;为什么会存在框架&lt;ul&gt;
&lt;li&gt;将状态移出DOM结构&lt;/li&gt;
&lt;li&gt;高度抽象&lt;/li&gt;
&lt;li&gt;代码组织&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;可以在应用程序和开发人员之间共用常见概念&lt;/li&gt;
&lt;li&gt;大型社区，共享知识，文档，错误修复&lt;/li&gt;
&lt;li&gt;通过工具和指南达成更好的应用程序结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;学习曲线&lt;/li&gt;
&lt;li&gt;项目大小最低要求&lt;/li&gt;
&lt;li&gt;体系和基础设施&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;JavaScript框架-1&quot;&gt;&lt;a href=&quot;#JavaScript框架-1&quot; class=&quot;headerlink&quot; title=&quot;JavaScript框架&quot;&gt;&lt;/a&gt;JavaScript框架&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;BACKBONE.JS&lt;/li&gt;
&lt;li&gt;ember&lt;/li&gt;
&lt;li&gt;ANGULARJS&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;客户端路由（Client-Side-Routing）&quot;&gt;&lt;a href=&quot;#客户端路由（Client-Side-Routing）&quot; class=&quot;headerlink&quot; title=&quot;客户端路由（Client-Side Routing）&quot;&gt;&lt;/a&gt;客户端路由（Client-Side Routing）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;“路由”：将URL映射到页面行为，包括从URL提取数据参数&lt;/li&gt;
&lt;li&gt;最初是一个服务端概念&lt;/li&gt;
&lt;li&gt;现代Web应用程序使用客户端上的路由能够快速更新和“深度链接”&lt;ul&gt;
&lt;li&gt;UI渲染&lt;/li&gt;
&lt;li&gt;数据获取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有主流框架生态系统都包含路由器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;状态-数据管理（State-Data-Management）&quot;&gt;&lt;a href=&quot;#状态-数据管理（State-Data-Management）&quot; class=&quot;headerlink&quot; title=&quot;状态/数据管理（State/Data Management）&quot;&gt;&lt;/a&gt;状态/数据管理（State/Data Management）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;内置&lt;ul&gt;
&lt;li&gt;Backbone：Models/Collections&lt;/li&gt;
&lt;li&gt;Ember：Ember Data&lt;/li&gt;
&lt;li&gt;Angular 1: Services/Controllers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;React&lt;ul&gt;
&lt;li&gt;局部组件状态&lt;/li&gt;
&lt;li&gt;“Flux”模式（单向数据流）&lt;/li&gt;
&lt;li&gt;Redux（单状态树，不可变更新；采用Flux的逻辑理论）&lt;/li&gt;
&lt;li&gt;MobX（依赖可观察进行跟踪）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Angular 2&lt;ul&gt;
&lt;li&gt;Services/Controllers&lt;/li&gt;
&lt;li&gt;Redux; Observables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;开发趋势：后端&quot;&gt;&lt;a href=&quot;#开发趋势：后端&quot; class=&quot;headerlink&quot; title=&quot;开发趋势：后端&quot;&gt;&lt;/a&gt;开发趋势：后端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;“X即服务”&lt;/li&gt;
&lt;li&gt;“无服务器”后端&lt;/li&gt;
&lt;li&gt;微服务（Microservices）&lt;/li&gt;
&lt;li&gt;容器（Containers）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;开发趋势：客户端-服务端&quot;&gt;&lt;a href=&quot;#开发趋势：客户端-服务端&quot; class=&quot;headerlink&quot; title=&quot;开发趋势：客户端/服务端&quot;&gt;&lt;/a&gt;开发趋势：客户端/服务端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;大规模的数据传输模式/工具&lt;ul&gt;
&lt;li&gt;GraphQL，Falcor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“同构”/“通用”Javascript应用程序&lt;ul&gt;
&lt;li&gt;服务端渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;随处可见JavaScript&lt;ul&gt;
&lt;li&gt;跨平台工具包（Cordova，Ionic）&lt;/li&gt;
&lt;li&gt;桌面应用（Electron）&lt;/li&gt;
&lt;li&gt;移动应用（React Native）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;开发趋势：客户端&quot;&gt;&lt;a href=&quot;#开发趋势：客户端&quot; class=&quot;headerlink&quot; title=&quot;开发趋势：客户端&quot;&gt;&lt;/a&gt;开发趋势：客户端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于组件的架构&lt;/li&gt;
&lt;li&gt;“虚拟DOM”&lt;/li&gt;
&lt;li&gt;CSS-in-JS&lt;/li&gt;
&lt;li&gt;WebGL，Web Workers，Service Workers&lt;/li&gt;
&lt;li&gt;替代语言（Elm，Clojurescript）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;开发趋势：概念&quot;&gt;&lt;a href=&quot;#开发趋势：概念&quot; class=&quot;headerlink&quot; title=&quot;开发趋势：概念&quot;&gt;&lt;/a&gt;开发趋势：概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数式编程（Functional Programming）&lt;/li&gt;
&lt;li&gt;不变数据(Immutable Data)&lt;/li&gt;
&lt;li&gt;响应式编程/观测（Reactive Programming / Observables）&lt;/li&gt;
&lt;li&gt;静态类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;打造一款现代Web-App&quot;&gt;&lt;a href=&quot;#打造一款现代Web-App&quot; class=&quot;headerlink&quot; title=&quot;打造一款现代Web App&quot;&gt;&lt;/a&gt;打造一款现代Web App&lt;/h2&gt;&lt;h3 id=&quot;当前App&quot;&gt;&lt;a href=&quot;#当前App&quot; class=&quot;headerlink&quot; title=&quot;当前App&quot;&gt;&lt;/a&gt;当前App&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用于内部使用的地理空间可视化工具&lt;/li&gt;
&lt;li&gt;Version 1&lt;ul&gt;
&lt;li&gt;GWT+SmartGWT&lt;/li&gt;
&lt;li&gt;Google Earth Plugin&lt;/li&gt;
&lt;li&gt;Play Framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;重写计划&quot;&gt;&lt;a href=&quot;#重写计划&quot; class=&quot;headerlink&quot; title=&quot;重写计划&quot;&gt;&lt;/a&gt;重写计划&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;GWT关注&lt;ul&gt;
&lt;li&gt;升级问题和框架的未来（可能即将到来的不兼容版本）&lt;/li&gt;
&lt;li&gt;低能的开发工具&lt;/li&gt;
&lt;li&gt;GWT特定的客户端-服务器通信与耦合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;v2原型/分析目标&lt;ul&gt;
&lt;li&gt;不被弃用的现代化工具技术栈&lt;/li&gt;
&lt;li&gt;改进的开发体验（快速重建，热重新加载，易于测试）&lt;/li&gt;
&lt;li&gt;更好的可维护性（代码结构，调试，数据流/跟踪）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;v2原型技术栈&lt;ul&gt;
&lt;li&gt;语言：ES6&lt;/li&gt;
&lt;li&gt;UI框架：React&lt;/li&gt;
&lt;li&gt;数据管理：Redux&lt;/li&gt;
&lt;li&gt;构建工具：Webpack+Babel&lt;/li&gt;
&lt;li&gt;测试：Mocha&lt;/li&gt;
&lt;li&gt;3D地球：Cesium&lt;/li&gt;
&lt;li&gt;风格：Semantic-UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为什么使用React和Redux？&lt;ul&gt;
&lt;li&gt;函数式编程原则，而且带有可靠的用法&lt;/li&gt;
&lt;li&gt;状态/数据/更新的显式跟踪；单向数据流使得跟踪更容易&lt;/li&gt;
&lt;li&gt;高度推荐使用的UI和逻辑&lt;/li&gt;
&lt;li&gt;开发能力，如time-travel调试和热重载加快开发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;原型进展&quot;&gt;&lt;a href=&quot;#原型进展&quot; class=&quot;headerlink&quot; title=&quot;原型进展&quot;&gt;&lt;/a&gt;原型进展&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;v2原型demo&lt;ul&gt;
&lt;li&gt;File watching and recompiling&lt;/li&gt;
&lt;li&gt;UI hot reloading&lt;/li&gt;
&lt;li&gt;Data editing&lt;/li&gt;
&lt;li&gt;Redux DevTools and time travel debugging&lt;/li&gt;
&lt;li&gt;Test running&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;进一步阅读&quot;&gt;&lt;a href=&quot;#进一步阅读&quot; class=&quot;headerlink&quot; title=&quot;进一步阅读&quot;&gt;&lt;/a&gt;进一步阅读&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Web历史&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segment.com/blog/the-deep-roots-of-js-fatigue/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Deep Roots of Javascript Fatigue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.keepsite.com/a-brief-history-of-the-web/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Brief History of the Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mgadams.com/modern-javascript-development-part-1-d271f3790c1c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Golden Age of Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现代Web技术&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/state-of-javascript-2016&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;State of the Javascript Landscape: A Map for Newcomers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://marcobotto.com/the-hitchhikers-guide-to-the-modern-front-end-development-workflow/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Hitchhiker’s Guide to the Modern Front End Development Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jargon.js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simplified Javascript Jargon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;State of the Art Javascript in 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wesbos.com/overwhelmed-with-web-development/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;On Being Overwhelmed With Our Fast-Paced Industry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stateofjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The State of Javascript in 2016: Survey Results&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇文章整理翻译自一篇讲稿，出处链接地址：&lt;a href=&quot;http://blog.isquaredsoftware.com/presentations/2016-10-revolution-of-web-dev/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.isquaredsoftware.com/presentations/2016-10-revolution-of-web-dev/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;随着时间推移，web开发带来了戏剧性变化，现代化web开发包含了一系列的工具、方法和概念。这些工具可能很复杂，但可以创建以前不可能实现的具有更快的开发速度和更好的可维护性的强大的应用程序。&lt;/p&gt;
&lt;h2 id=&quot;Web开发简史&quot;&gt;&lt;a href=&quot;#Web开发简史&quot; cl
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>Promise有哪些使用技巧？</title>
    <link href="http://yoursite.com/2017/09/30/promise-pro-tips/"/>
    <id>http://yoursite.com/2017/09/30/promise-pro-tips/</id>
    <published>2017-09-30T02:14:58.000Z</published>
    <updated>2017-10-27T06:15:05.095Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Promise-all&quot;&gt;&lt;a href=&quot;#Promise-all&quot; class=&quot;headerlink&quot; title=&quot;Promise.all&quot;&gt;&lt;/a&gt;Promise.all&lt;/h3&gt;&lt;p&gt;这个方法用来一次执行多个promise非常有用。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.all([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    promise1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    promise2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Promise-resolve&quot;&gt;&lt;a href=&quot;#Promise-resolve&quot; class=&quot;headerlink&quot; title=&quot;Promise.resolve&quot;&gt;&lt;/a&gt;Promise.resolve&lt;/h3&gt;&lt;p&gt;这个方法用来包装同步代码，使之成为一个promise。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (somethingNotRight()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;I will be rejected asynchronously!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;This string will be resolved asynchronously!&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Promise执行链&quot;&gt;&lt;a href=&quot;#Promise执行链&quot; class=&quot;headerlink&quot; title=&quot;Promise执行链&quot;&gt;&lt;/a&gt;Promise执行链&lt;/h3&gt;&lt;p&gt;有时候需要一个一个promise顺序执行，下面的技巧可以实现这个想法。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sequentialize&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;promiseFactories&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chain = &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    promiseFactorires.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;promiseFactory&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        chain = chain.then(promiseFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; chain;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Promise-race&quot;&gt;&lt;a href=&quot;#Promise-race&quot; class=&quot;headerlink&quot; title=&quot;Promise.race&quot;&gt;&lt;/a&gt;Promise.race&lt;/h3&gt;&lt;p&gt;这个擅长处理一个定时任务。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.race([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setTimeout(reject, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    doSomethingThatMayTakeAwhile()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Promise-finally&quot;&gt;&lt;a href=&quot;#Promise-finally&quot; class=&quot;headerlink&quot; title=&quot;Promise.finally&quot;&gt;&lt;/a&gt;Promise.finally&lt;/h3&gt;&lt;p&gt;这个方法类似Q.finally，像这样使用：&lt;code&gt;promise.then(...).catch(...).finally(...)&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;finally&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;promise, cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; promise.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; promies2 = cb();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; promise2.then === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; promise2.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;reason&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; promise2 = cb();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; promise2.then === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; promise2.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reason;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reason;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Promise-all&quot;&gt;&lt;a href=&quot;#Promise-all&quot; class=&quot;headerlink&quot; title=&quot;Promise.all&quot;&gt;&lt;/a&gt;Promise.all&lt;/h3&gt;&lt;p&gt;这个方法用来一次执行多个promise非常有用。&lt;/p&gt;
&lt;figu
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6测试解答</title>
    <link href="http://yoursite.com/2017/09/24/es6-quiz-answer-explain/"/>
    <id>http://yoursite.com/2017/09/24/es6-quiz-answer-explain/</id>
    <published>2017-09-24T02:42:53.000Z</published>
    <updated>2017-10-27T11:24:08.007Z</updated>
    
    <content type="html">&lt;h3 id=&quot;第一题&quot;&gt;&lt;a href=&quot;#第一题&quot; class=&quot;headerlink&quot; title=&quot;第一题&quot;&gt;&lt;/a&gt;第一题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; func = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func.name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;func&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;anonymous&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这道题考察ES6中function的name属性，ES6会返回实际的函数名，而ES5则返回空字符串，因此这道题的结果是 &lt;span style=&quot;color:#F92672;&quot;&gt;func&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第二题&quot;&gt;&lt;a href=&quot;#第二题&quot; class=&quot;headerlink&quot; title=&quot;第二题&quot;&gt;&lt;/a&gt;第二题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; DOLPHIN = &lt;span class=&quot;string&quot;&gt;&quot;\ud83d\udc2c&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DOLPHIN.length + [...DOLPHIN].length&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这道题涉及到ES6中Unicode字符，DOLPHIN.length返回长度为2，这是因为JavaScript内部字符以UTF-16的格式存储，每个字符固定为2个字节，因此DOLPHIN被认为为两个字符；[…DOLPHIN]用来解构字符串，结果是一个字符，因此[…DOLPHIN].length值为1。所以这个题的答案是 &lt;span style=&quot;color:#F92672;&quot;&gt;3&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第三题&quot;&gt;&lt;a href=&quot;#第三题&quot; class=&quot;headerlink&quot; title=&quot;第三题&quot;&gt;&lt;/a&gt;第三题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sym1 = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sym2 = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o1 = &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o2 = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperties(o2, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [sym1]: &amp;#123;value: &lt;span class=&quot;string&quot;&gt;&#39;Sym 1&#39;&lt;/span&gt;, enumerable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [sym2]: &amp;#123;value: &lt;span class=&quot;string&quot;&gt;&#39;Sym 2&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(o1, o2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertSymbols(o1).lenght + &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertySymbols(o2).length;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这道题考察了Object对象三个方法的使用，defineProperties方法用来定义对象的属性以及其特性（是否可写，可配置，可枚举）；assign方法用来拷贝对象的属性，但是不可枚举的属性不会引入新对象中；getOwnPropertSymbols方法用来获取所有Symbol属性，包括不可枚举的Symbol属性。因此o1含有Symbol属性长度为1, o2含有Symbol属性长度为2，程序运行结果为 &lt;span style=&quot;color:#F92672;&quot;&gt;3&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第四题&quot;&gt;&lt;a href=&quot;#第四题&quot; class=&quot;headerlink&quot; title=&quot;第四题&quot;&gt;&lt;/a&gt;第四题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &amp;#123;[&lt;span class=&quot;string&quot;&gt;&quot;__proto__&quot;&lt;/span&gt;]: &lt;span class=&quot;string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = &amp;#123;__proto__: &lt;span class=&quot;string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj3 = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;__proto__&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj1.hasOwnProperty(&lt;span class=&quot;string&quot;&gt;&quot;__proto__&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj2.hasOwnProperty(&lt;span class=&quot;string&quot;&gt;&quot;__proto__&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj3.hasOwnProperty(&lt;span class=&quot;string&quot;&gt;&quot;__proto__&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[true, true, true]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[true, false, false]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[true, false, false]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[false, false, false]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[false, true, true]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;thrown &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;__proto__魔法属性与非计算属性名的关系，可以看这里的运行原理&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-__proto__-property-names-in-object-initializers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;__proto__ Property Names in Object Initializers&lt;/a&gt;。这道题的运行结果为 &lt;span style=&quot;color:#F92672;&quot;&gt;[true, false, false]&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第五题&quot;&gt;&lt;a href=&quot;#第五题&quot; class=&quot;headerlink&quot; title=&quot;第五题&quot;&gt;&lt;/a&gt;第五题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &quot;use strict&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arrow = () =&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arrow(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;“A”&lt;/li&gt;
&lt;li&gt;“B”&lt;/li&gt;
&lt;li&gt;thrown “TypeError”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这道题考察了arrow函数定义与运行时arguments指向，arrow函数在定义时已经将arguments绑定在词法中，类似this、super和new.target，因此结果为 &lt;span style=&quot;color:#F92672;&quot;&gt;A&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第六题&quot;&gt;&lt;a href=&quot;#第六题&quot; class=&quot;headerlink&quot; title=&quot;第六题&quot;&gt;&lt;/a&gt;第六题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = () =&amp;gt; &amp;#123; foo: &lt;span class=&quot;string&quot;&gt;&quot;BAR&quot;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; f();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;“string”&lt;/li&gt;
&lt;li&gt;“object”&lt;/li&gt;
&lt;li&gt;“undefined”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;箭头函数里面的内容不会被解析成对象字面量，但是会作为区块和标记声明。没有包含return语句，所以return的值为 &lt;span style=&quot;color:#F92672;&quot;&gt;underfined&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第七题&quot;&gt;&lt;a href=&quot;#第七题&quot; class=&quot;headerlink&quot; title=&quot;第七题&quot;&gt;&lt;/a&gt;第七题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.raw\&lt;span class=&quot;string&quot;&gt;`Line\nTerminator\` == &quot;Line\\nTerminator&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    \`\u3042\` == &quot;\u3042&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String.raw\`\u3042\` == &quot;\u3042&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[true, true, true]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[false, true, true]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[true, true, false]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[false, true, false]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;模板字符串与普通字符串的关系、模板字符串处理String.raw会将没有转义的字符转义。数组的结果为 &lt;span style=&quot;color:#F92672;&quot;&gt;[true, true, false]&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第八题&quot;&gt;&lt;a href=&quot;#第八题&quot; class=&quot;headerlink&quot; title=&quot;第八题&quot;&gt;&lt;/a&gt;第八题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;out&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo(n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;in&quot;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; foo(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot;side&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.foo();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这道题比较迷惑的是obj.foo函数内的foo函数指向哪个函数，这个foo(1)执行调用的函数是外部定义的foo函数，没有绑定在obj对象上。运行结果为 &lt;span style=&quot;color:#F92672;&quot;&gt;outside&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第九题&quot;&gt;&lt;a href=&quot;#第九题&quot; class=&quot;headerlink&quot; title=&quot;第九题&quot;&gt;&lt;/a&gt;第九题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = () =&amp;gt; &amp;#123; foo: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;; &amp;#125; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; f();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;object&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;function&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;undefined&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;thrown &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;箭头函数内部解析成标记声明，但是缺乏function名字，导致了语法错误。结果是 &lt;span style=&quot;color:#F92672;&quot;&gt;thrown SyntaxError&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第十题&quot;&gt;&lt;a href=&quot;#第十题&quot; class=&quot;headerlink&quot; title=&quot;第十题&quot;&gt;&lt;/a&gt;第十题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = () =&amp;gt; &amp;#123; foo: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;FOO&quot;&lt;/span&gt; &amp;#125; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; f();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;object&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;function&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;undefined&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;thrown &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在strict模式下标记函数声明（&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-labelled-function-declarations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Labelled Function Declarations&lt;/a&gt;）会出现语法错误。这道题的结果自然为 &lt;span style=&quot;color:#F92672;&quot;&gt;thrown SyntaxError&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第十一题&quot;&gt;&lt;a href=&quot;#第十一题&quot; class=&quot;headerlink&quot; title=&quot;第十一题&quot;&gt;&lt;/a&gt;第十一题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&quot;obj&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Foo() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.Foo.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&quot;Foo&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; obj.Foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj.name, foo.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[&amp;quot;obj&amp;quot;, undefined]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;quot;Foo&amp;quot;, undefined]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[undefined, &amp;quot;Foo&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;thrown &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;thrown &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ES6中对象的属性简洁表示法中，函数作为对象的方法定义不具有[[Construct]]内部方法。obj.Foo()只是一个函数而不是构造函数，不能用new操作，出现 &lt;span style=&quot;color:#F92672;&quot;&gt;thrown TypeError&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第十二题&quot;&gt;&lt;a href=&quot;#第十二题&quot; class=&quot;headerlink&quot; title=&quot;第十二题&quot;&gt;&lt;/a&gt;第十二题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg1, ...rest&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arg1 = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这道题涉及到&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-functiondeclarationinstantiation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;函数声明&lt;/a&gt;和函数参数内部机制，当函数参数出现rest参数时argmuments被创建成&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UnmappedArgumentsObject&lt;/a&gt;对象。unmapped argument object意味着函数在传实参后arguments对象值不会再改变。创建成这种参数对象的情况还有以下几种：严格模式下、非严格模式下某些情况（含有rest参数、任何具有初始值的参数、任何具有解构参数）。所以这道题的结果是 &lt;span style=&quot;color:#F92672;&quot;&gt;1&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第十三题&quot;&gt;&lt;a href=&quot;#第十三题&quot; class=&quot;headerlink&quot; title=&quot;第十三题&quot;&gt;&lt;/a&gt;第十三题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).fill(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [...[,,,]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[false, true, true, false, true]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[false, false, false, false, false]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[false ,false, true, true, true]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这道题考察了稀疏数组和稠密数组的生成与区别，稀疏数组与稠密数组的不同是数组每项元素是否都存在，稀疏数组不存在的元素项不可遍历。ES6的方法会将稀疏数组转化成稠密数组，默认是undefined值。上面的结果是 &lt;span style=&quot;color:#F92672;&quot;&gt;[false, false, true, true, true]&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第十四题&quot;&gt;&lt;a href=&quot;#第十四题&quot; class=&quot;headerlink&quot; title=&quot;第十四题&quot;&gt;&lt;/a&gt;第十四题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findFirstUndefined&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value, index&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result.push(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, , &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].some(findFirstUndefined);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, , &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].find(findFirstUndefined);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[1, 1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;thrown &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ES5中的遍历方法会忽略空的数组项，ES6会把空的数组项设为undefined。上面的result值为 &lt;span style=&quot;color:#F92672;&quot;&gt;[1]&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第十五题&quot;&gt;&lt;a href=&quot;#第十五题&quot; class=&quot;headerlink&quot; title=&quot;第十五题&quot;&gt;&lt;/a&gt;第十五题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPrototypeChainOf&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prototypeChain = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(obj = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getPrototypeOf(obj)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prototypeChain.push(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prototypeChain;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; g = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; *(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getPrototypeChainOf(g()).length;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这道题涉及到generator函数原型链方面的知识。从generator函数原型一直往上遍历的原型顺序分别为：Genetator、GeneratorFunction、Symbol.iterator、Object。所得到的原型链长度为 &lt;span style=&quot;color:#F92672;&quot;&gt;4&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第十六题&quot;&gt;&lt;a href=&quot;#第十六题&quot; class=&quot;headerlink&quot; title=&quot;第十六题&quot;&gt;&lt;/a&gt;第十六题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; list = [&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = (c, p) =&amp;gt; c + p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list.map(&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.isNaN).reduce(sum),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list.map(&lt;span class=&quot;built_in&quot;&gt;isNaN&lt;/span&gt;).reduce(sum)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[1, 1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1, 2]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 2]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这道题需要区分Number.isNaN和isNaN方法，两者的不同点是前者不会对输入数据进行类型转化直接判断结果，只有NaN为true，其他都为false。上面数组的结果是 &lt;span style=&quot;color:#F92672;&quot;&gt;[1, 2]&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第十七题&quot;&gt;&lt;a href=&quot;#第十七题&quot; class=&quot;headerlink&quot; title=&quot;第十七题&quot;&gt;&lt;/a&gt;第十七题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    length: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *[&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;.iterator]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(obj).length;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;thrown &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.from&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Array.from&lt;/a&gt;会将伪数组和可迭代对象转换成数组对象，判断其长度会先去看迭代器的内容，因此上面的结果是 &lt;span style=&quot;color:#F92672;&quot;&gt;2&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;问题来源：&lt;a href=&quot;https://gist.github.com/teramako/858c448cb76cb8d309b0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/teramako/858c448cb76cb8d309b0&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一题&quot;&gt;&lt;a href=&quot;#第一题&quot; class=&quot;headerlink&quot; title=&quot;第一题&quot;&gt;&lt;/a&gt;第一题&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript语言对象扩展小结</title>
    <link href="http://yoursite.com/2017/09/16/ecmascript-language-object-extensions-2017/"/>
    <id>http://yoursite.com/2017/09/16/ecmascript-language-object-extensions-2017/</id>
    <published>2017-09-16T12:06:44.000Z</published>
    <updated>2017-10-12T12:50:19.237Z</updated>
    
    <content type="html">&lt;p&gt;ECMAScript语言发展越来越迅速，ES5之前好几年才发布一次新的标准规范，从ES6 (ECMAScript 2015)开始，每年发布一次标准规范，基于向后兼容的原则对语言进行功能扩展使得开发效率越来越高。&lt;/p&gt;
&lt;p&gt;下面将ECMAScript在数值、字符串、数组、对象、函数、正则表达式上的扩展做一个小结。&lt;/p&gt;
&lt;h3 id=&quot;数值&quot;&gt;&lt;a href=&quot;#数值&quot; class=&quot;headerlink&quot; title=&quot;数值&quot;&gt;&lt;/a&gt;数值&lt;/h3&gt;&lt;p&gt;从ES5开始，在严格模式之中，八进制不在允许使用前缀&lt;code&gt;0&lt;/code&gt;表示。ES6提供了二进制和八进制数值新的写法，分别用前缀&lt;code&gt;0b&lt;/code&gt;（或&lt;code&gt;0B&lt;/code&gt;）和&lt;code&gt;0o&lt;/code&gt;（或&lt;code&gt;0O&lt;/code&gt;）表示。&lt;/p&gt;
&lt;p&gt;数值对象方法在ES6中有一些变化，将全局方法isFinite()、isNaN()、parseInt()、parseFloat()放在了Number对象下，分别是Number.isFinite()、Number.isNaN()、Number.parseInt()、Number.parseFloat()。全局方法和Number对象下isFinite()、isNaN()的这些方法的主要区别是全局方法在计算时会将参数先进行类型转换，转成数值再进行计算，而Number下的这些方法不会对参数类型转换直接进行计算。parseInt()、parseFloat()两者表现一致。&lt;/p&gt;
&lt;p&gt;此外ES6还扩展了Number.EPSILON属性、Number.isInterger()方法、Number.MAX_SAFE_INTEGER属性、Number.MIN_SAFE_INTEGER属性、Number.isSafeInteger()方法。&lt;/p&gt;
&lt;p&gt;Number.EPSILON是一个极小的常量，表示1与大于1的最小浮点数之间的差。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.EPSILON&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2.220446049250313e-16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Number.isInterger()方法用来判断一个值是否为整数。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.isInteger(&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.isInteger(&lt;span class=&quot;number&quot;&gt;23.08&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量与JavaScript能够准确表示的整数范围有关，分别表示这个范围的上限和下限。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MAX_SAFE_INTEGER&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 9007199254740991&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MAX_SAFE_INTEGER === &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MIN_SAFE_INTEGER&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// -9007199254740991&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MIN_SAFE_INTEGER === -&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Number.isInterger()和Number.isSafeInteger()方法用来判断一个值是否为整数。它们之间的区别是后者判断一个整数是否落在JavaScript所能精确的数值范围内。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.isInteger(&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MIN_SAFE_INTEGER - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.isSafeInteger(&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MIN_SAFE_INTEGER - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ES6在Math对象上新增了18个与数学相关的方法。所有方法都是静态方法，只能在Math对象上调用。其中包含了4个对数相关的方法，6个双曲函数方法。&lt;/p&gt;
&lt;p&gt;ES2016新增了一个指数运算法（**），在V8引擎中指数运算符与Math.pow实现不相同，对于特别大的运算结果两者会有细微的差异。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ** &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt; === &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;JavaScript是一组由16位组成的不可变的有序序列，每个字符通常来自于采用UTF-16编码的Unicode字符集。采用&lt;code&gt;\uxxxx&lt;/code&gt;形式表示一个字符，其中&lt;code&gt;xxxx&lt;/code&gt;表示字符的Unicode码点，这种表示法只限于码点在&lt;code&gt;\u0000&lt;/code&gt;~&lt;code&gt;\uFFFF&lt;/code&gt;之间的字符。超出这个范围的字符必须使用两个双字节的形式表示。&lt;/p&gt;
&lt;p&gt;ES6中对直接跟在&lt;code&gt;\u&lt;/code&gt;后面超过&lt;code&gt;0xFFFF&lt;/code&gt;的数值做了一点改进，只要将码点放入大括号就能正确解读该字符。&lt;/p&gt;
&lt;p&gt;在ES5中对字符串对象扩展了一个实例方法trim()，此方法用来移除字符串两侧的空白。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; org = &lt;span class=&quot;string&quot;&gt;&#39; example &#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;org.trim(); &lt;span class=&quot;comment&quot;&gt;// &#39;example&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ES6中字符串扩展了一些方法，用来更便捷地处理字符串。字符串对象方法新增了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够识别Unicode编号大于&lt;code&gt;0xFFFF&lt;/code&gt;的码点返回对应字符 String.fromCodePoint()&lt;/li&gt;
&lt;li&gt;模板字符串转义处理 String.raw()&lt;/li&gt;
&lt;li&gt;实例方法新增了正确处理4个字节储存的字符返回其码点 codePointAt()&lt;/li&gt;
&lt;li&gt;能够识别Unicode编号大于&lt;code&gt;0xFFFF&lt;/code&gt;字符指定位置的字符 at()&lt;/li&gt;
&lt;li&gt;字符不同表示方法统一同样形式（Unicode正规化）normalize()&lt;/li&gt;
&lt;li&gt;确定一个字符串是否包含在另一个字符串中 includes()&lt;/li&gt;
&lt;li&gt;参数字符串是否在原字符串的头部 startsWith()&lt;/li&gt;
&lt;li&gt;参数字符串是否在原字符串的尾部 endsWith()&lt;/li&gt;
&lt;li&gt;将原字符串重复&lt;code&gt;n&lt;/code&gt;次返回的新字符串 repeat()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ECAMScript 2017添加了两个字符串对象方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串在头部补全长度返回新字符串 padStart()&lt;/li&gt;
&lt;li&gt;字符串在尾部补全长度返回新字符串 padEnd()&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCharCode(&lt;span class=&quot;number&quot;&gt;0x20BB7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;ஷ&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.raw&lt;span class=&quot;string&quot;&gt;`Hello\n&lt;span class=&quot;subst&quot;&gt;$&amp;#123;2*4&amp;#125;&lt;/span&gt;!`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;Hello\n8!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;𠮷a&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.codePointAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 134071&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.codePointAt(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 57271&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;𠮷&#39;&lt;/span&gt;.at(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;𠮷&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;.at(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;h&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;\u01D1&#39;&lt;/span&gt;.normalize() === &lt;span class=&quot;string&quot;&gt;&#39;\u004F\u030C&#39;&lt;/span&gt;.normalize()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; compareStr = &lt;span class=&quot;string&quot;&gt;&#39;Hello world!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compareStr.includes(&lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compareStr.startsWith(&lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compareStr.endsWith(&lt;span class=&quot;string&quot;&gt;&#39;!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;man&#39;&lt;/span&gt;.repeat(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;manmanmanman&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;.padStart(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;abcx&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;.padEnd(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;xabc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h3&gt;&lt;p&gt;ES5定义了9个新的数组方法来遍历forEach()、映射map()、过滤filter()、检测every()及some()、简化reduce()及reduceRight()和搜索数组indexOf()及lastIndexOf()。这些方法大多数第一次参数是一个函数，并且对数组每个元素调用一次该函数。如果是稀疏数组，对不存在的元素不调用传递的函数。大多数情况下，调用提供的函数使用三个参数：数组元素、元素的索引和数组本身。这些大多数数组方法第二个参数可选，若有第二个参数调用函数可看作是第二参数的方法。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum += v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// sum = 21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;v, i, arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arr[i] = v * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// data = [2, 4, 6, 8, 10, 12]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是forEach()不支持循环break终止语句，需要提前跳出循环只能用try…catch语句。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; all = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; allNew = all.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v*v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// allNew = [1, 4, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; allPart = allNew.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// allPart = [1, 4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allPart.every(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allPart.some(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = all.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x +y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// sum = 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; big = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].reduceRight(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;accumulator, value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// (2, 3) (9, 2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(value, accumulator);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// big = 512&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].indexOf(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].lastIndexOf(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].indexOf(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// -1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ES6中新增了扩展运算符（spread），三个点（…），作用是将一个数组转为用逗号分隔的参数序列。可用来复制数组、合并数组、与ES6解构赋值结合起来生成新数组、字符串转真正的数组。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a2 = [...a1]; &lt;span class=&quot;comment&quot;&gt;// const [...a2] = a1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a2 = [1, 2, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a3 = [...a1, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a3 = [1, 2, 3, 4, 5, 6]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [first, ...rest] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// first = 1, rest = [2, 3, 4, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a4 = [...&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a4 = [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此外ES6也新增了一些数组方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于将类对象转为真正的数组 Array.from()&lt;/li&gt;
&lt;li&gt;将一组值转为数组 Array.of()&lt;/li&gt;
&lt;li&gt;在当前数组内部将指定位置的成员复制到其他位置返回新数组 copyWithin()&lt;/li&gt;
&lt;li&gt;找出第一个符合条件的数组成员 find()&lt;/li&gt;
&lt;li&gt;返回第一个符合条件的数组成员的位置 findIndex()&lt;/li&gt;
&lt;li&gt;使用给定值填充数组返回新数组 fill()&lt;/li&gt;
&lt;li&gt;遍历数组键名 keys()&lt;/li&gt;
&lt;li&gt;遍历数组键值 values()&lt;/li&gt;
&lt;li&gt;遍历数组键值对 entries()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ECMAScript 2016新增了一个数组方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组是否包含某个值 includes()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;稀疏数组就是包含从0开始的不连续索引的数组，比起稠密数组实现上更慢、内存利用率更高、查找元素时间更长。可通过Array()构造函数或简单指定数组的索引值大于当前的数组长度创建稀疏数组，也可以通过delete操作符生产稀疏数组。数组空位是指数组的某一个位置没有任何值。&lt;/p&gt;
&lt;p&gt;ES5对稀疏数组和数组空位处理大多数情况下会忽略空位。ES6则会将其转为undefined。&lt;/p&gt;
&lt;h3 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h3&gt;&lt;p&gt;在ES5中属性的值可以是一个getter或setter函数（或两者都有），可以对对象创建的属性特性（property attribute）（可写writable、可枚举enumerable、可配置configurable）进行配置。有getter和setter定义的属性称作“存取器属性”（accessor property），它不同于由一个简单的值构成的数据属性。存取器属性不具有值特性和可写性。&lt;/p&gt;
&lt;p&gt;ES5针对Object扩展了以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用指定的原型对象及其属性去创建一个新的对象 Object.create(proto[, propertiesObject])&lt;/li&gt;
&lt;li&gt;直接在一个对象上定义一个新属性或者修改现有属性并返回这个对象 Object.defineProperty(obj, prop, descriptor) （descriptor描述符可选键值value, get, set, enumerable, writable, configurable）&lt;/li&gt;
&lt;li&gt;直接在一个对象上定义新的属性或修改现有属性 Object.defineProperties(obj, props)&lt;/li&gt;
&lt;li&gt;返回指定对象上一个自由属性对应的属性描述符 Object.getOwnPropertyDescriptor(obj, prop)&lt;/li&gt;
&lt;li&gt;返回指定对象的所有自身属性（包括不可枚举属性但不包括Symbol值为名称的属性）组成的数组 Object.getOwnPropertyNames(obj)&lt;/li&gt;
&lt;li&gt;返回指定对象的原型（即内部[[Prototype]]属性的值）Object.getPrototypeOf(object)&lt;/li&gt;
&lt;li&gt;返回给定对象自身可枚举属性（不包含原型链上的属性）组成的数组 Object.keys(obj)&lt;/li&gt;
&lt;li&gt;冻结一个对象（即对象永远不可变）Object.freeze(obj)&lt;/li&gt;
&lt;li&gt;判断一个对象是否被冻结 Object.isFrozen(obj)&lt;/li&gt;
&lt;li&gt;使一个对象变的不可扩展（即不能添加新的属性）Object.preventExtensions(obj)&lt;/li&gt;
&lt;li&gt;判断一个对象是否是可扩展（能否在它上面添加新的属性）Object.isExtensible(obj)&lt;/li&gt;
&lt;li&gt;将一个对象密封并返回被密封后的对象（只有可写属性不受影响）Object.seal(obj)&lt;/li&gt;
&lt;li&gt;判断一个对象是否被密封 Object.isSealed(obj)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ES6允许直接写入变量和函数作为对象的属性和方法，可在字面量定义对象时使用表达式作为对象的属性名，表达式放在方括号内。&lt;/p&gt;
&lt;p&gt;ES6针对Object扩展了以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较两个值是否严格相等 Object.is(value1, value2)&lt;/li&gt;
&lt;li&gt;将所有可枚举属性的值从一个或多个源对象复制到目标对象 Object.assign(target, …source)&lt;/li&gt;
&lt;li&gt;设置一个指定对象原型到另一个对象或null Object.setPrototypeOf(obj, prototype)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaScript语言中生成实例对象的传统方法是通过构造函数。ES6提供了更接近传统语言的写法，引入了Class（类）这个概念作为对象的模板，可通过&lt;code&gt;class&lt;/code&gt;关键字定义类。&lt;/p&gt;
&lt;p&gt;ECMAScript 2017在Object上新增了三个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回一个给定对象自己的所有可枚举属性值的数组 Object.values(obj)&lt;/li&gt;
&lt;li&gt;返回一个给定对象自身可枚举属性的键值对数组 Object.entries(obj)&lt;/li&gt;
&lt;li&gt;获取一个对象的所有自身属性描述符 Object.getOwnPropertyDescriptors(obj)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;在ES5中新增了一个方法，用来改变函数调用时的this指向：fun.bind(thisArg[, arg1, [, arg2[, …]]])。&lt;/p&gt;
&lt;p&gt;在ES6中可以指定函数参数的默认值，指定参数默认值后函数的length属性将返回没有指定默认值的参数个数。引入rest参数（形式为…变量名），用于获取函数多余的参数，rest参数能够将多余的参数放入一个数组中。ES6优化了尾调用性能。&lt;/p&gt;
&lt;p&gt;ES6定义了一种新的函数定义方式，使用“箭头”（=&amp;gt;）定义函数，简化了函数的定义，函数体内的this对象是定义时所在的对象而不是使用时所在的对象。针对异步编程提出了一个解决方案为Generator函数。&lt;/p&gt;
&lt;p&gt;ES2017引入了async函数，使得异步操作变得更加方便。async函数实为Generator函数的语法糖。&lt;/p&gt;
&lt;h3 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h3&gt;&lt;p&gt;ES5中用正则表达式创建的RegExp对象运行时实例独立，ES3则共享同一个实例。&lt;/p&gt;
&lt;p&gt;ES6允许用RegExp构造函数第一个参数是正则对象时，第二个参数可指定修饰符，并且会忽略原有正则表达式的修饰符。&lt;/p&gt;
&lt;p&gt;字符串对象共有4个方法，可以使用正则表达式：match()、replace()、search()、split()，ES6将这4个方法在语言内部全部调用RegExp的实例方法，从而做到所有正则相关的方法全都定义在RegExp对象上。&lt;/p&gt;
&lt;p&gt;ES6对正则表达式添加了u修饰符（Unicode模式）、y修饰符（粘连修饰符）、s修饰符（dotAll模式），同时新增了sticky属性（是否设置y修饰符）、flags属性（返回正则表达式的所有修饰符）、dotAll属性（是否设置s修饰符）。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;ECMAScript语言发展越来越迅速，ES5之前好几年才发布一次新的标准规范，从ES6 (ECMAScript 2015)开始，每年发布一次标准规范，基于向后兼容的原则对语言进行功能扩展使得开发效率越来越高。&lt;/p&gt;
&lt;p&gt;下面将ECMAScript在数值、字符串、数组、
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React编码规范</title>
    <link href="http://yoursite.com/2017/08/30/react-code-style/"/>
    <id>http://yoursite.com/2017/08/30/react-code-style/</id>
    <published>2017-08-30T02:03:56.000Z</published>
    <updated>2017-09-01T11:55:08.513Z</updated>
    
    <content type="html">&lt;h2 id=&quot;文件组织&quot;&gt;&lt;a href=&quot;#文件组织&quot; class=&quot;headerlink&quot; title=&quot;文件组织&quot;&gt;&lt;/a&gt;文件组织&lt;/h2&gt;&lt;p&gt;· [强制]同一目录下不得拥有同名的.js和.jsx文件。&lt;br&gt;  在使用模块导入时，倾向于不添加后缀，如果存在同名但不同后缀的文件，构建工具将无法决定哪一个是需要引入的模块。&lt;/p&gt;
&lt;p&gt;· [强制]组件文件使用一致的.js或.jsx后缀。&lt;br&gt;  所有组件文件的后缀从.js或.jsx中任选其一。&lt;br&gt;  不应在项目中出现部分组件为.js文件，部分为.jsx情况。&lt;/p&gt;
&lt;p&gt;· [强制]每一个文件以export default的形式暴露一个组件。&lt;br&gt;  允许一个文件中存在多个不同的组件，但仅允许通过export default暴露一个组件，其他组件均定义为内部组件。&lt;/p&gt;
&lt;p&gt;· [强制]每个存在组建的目录使用一个index.js以命名导出的形式暴露所有组件。&lt;br&gt;  同目录内的组件相互引用使用&lt;code&gt;import Foo from &amp;#39;./Foo&amp;#39;;&lt;/code&gt;进行。&lt;br&gt;  引用其他目录的组件使用&lt;code&gt;import {Foo} from &amp;#39;../component&amp;#39;;&lt;/code&gt;进行。&lt;br&gt;  建议使用VSCode的export-index插件自动生成index.js内容。&lt;/p&gt;
&lt;h2 id=&quot;命名规则&quot;&gt;&lt;a href=&quot;#命名规则&quot; class=&quot;headerlink&quot; title=&quot;命名规则&quot;&gt;&lt;/a&gt;命名规则&lt;/h2&gt;&lt;p&gt;· [强制]组件名为PascalCase。&lt;br&gt;  包括函数组件，名称均为PasCalCase。&lt;/p&gt;
&lt;p&gt;· [强制]组件名称与文件名称保持相同。&lt;br&gt;  同时组件名称应当能体现出组件的功能，以便通过观察文件名即确定使用哪一个组件。&lt;/p&gt;
&lt;p&gt;· [强制]高阶组件使用camelCase命名。&lt;br&gt;  高阶组件事实上并非一个组件，而是一个“生成组件类型”的函数，因此遵守JavaScript函数命名的规范，使用camelCase命名。&lt;/p&gt;
&lt;p&gt;· [强制]使用onXxx形式作为props中用于回调的属性名称。&lt;br&gt;  使用统一的命名规则用以区分props中回调和非回调部分的属性，在JSX上可以清晰地看到一个组件向上和向下的逻辑交互。&lt;br&gt;  对于不用于回调函数类型的属性，使用动词作为属性名称。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// onClick作为回调函数以on开头，renderText非回调函数则使用动词&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Label = (&amp;#123;onClick, renderText&amp;#125;) =&amp;gt; &amp;lt;span onClick=&amp;#123;onClick&amp;#125;&amp;gt;&amp;#123;renderText()&amp;#125;&amp;lt;/span&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [建议]使用withXxx或xxxable形式的词作为高阶组件的名称。&lt;br&gt;  高阶组件是为组件添加行为和功能的函数，因此使用如上形式的词有助于对其功能进行理解。&lt;/p&gt;
&lt;p&gt;· [建议]作为组件方法的事件处理函数以具体业务含义的词作为名称，不使用onXxx形式命名。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Form&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @autobind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    collectAndSubmitData() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            age: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.onSubmit(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @autobind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    syncName() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @autobind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    syncAge() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;label&amp;gt;姓名：&amp;lt;input type=&quot;text&quot; onChange=&amp;#123;this.syncName&amp;#125;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;label&amp;gt;年龄：&amp;lt;input type=&quot;text&quot; onChange=&amp;#123;this.syncAge&amp;#125;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;button type=&quot;button&quot; onClick=&amp;#123;this.collectAndSubmit&amp;#125;&amp;gt;提交&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;组件声明&quot;&gt;&lt;a href=&quot;#组件声明&quot; class=&quot;headerlink&quot; title=&quot;组件声明&quot;&gt;&lt;/a&gt;组件声明&lt;/h2&gt;&lt;p&gt;· [强制]使用ES Class声明组件，禁止使用React.createClass。&lt;br&gt;  React v15.5.0已经弃用了React.createClass函数。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Message = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;span&amp;gt;&amp;#123;this.state.message&amp;#125;&amp;lt;/span&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PureComponent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;span&amp;gt;&amp;#123;this.state.message&amp;#125;&amp;lt;/span&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [强制]不使用state的组件声明为函数组件。&lt;br&gt;  函数组件在React中有着特殊的地位，在将来也有可能得到更多的内部优化。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NextNumber&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;span&amp;gt;&amp;#123;this.props.value + 1&amp;#125;&amp;lt;/span&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; NextNumber = (&amp;#123;value&amp;#125;) =&amp;gt; &amp;lt;span&amp;gt;&amp;#123;value + 1&amp;#125;&amp;lt;/span&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [强制]所有组件军需声明propTypes。&lt;br&gt;  propTypes在提升组件健壮性的同时，也是一种类似组件的文档的存在，有助于代码的阅读和理解。&lt;/p&gt;
&lt;p&gt;· [强制]对于所有非isRequired的属性，在defaultProps中声明对应的值。&lt;br&gt;  声明初始值有助于对组件初始化的理解，也可以减少propTypes对类型进行校验产生的开销。&lt;br&gt;  对于初始没有值的属性，应当声明初始值为null而非undefined。&lt;/p&gt;
&lt;p&gt;· [强制]如无必要，使用静态属性语法声明propTypes、contextTypes、defaultProps和state。&lt;br&gt;  仅当初始state需要从props计算得到的时候，才将state的声明放在构造函数中，其他情况下均适用静态属性声明进行。&lt;/p&gt;
&lt;p&gt;· [强制]依照规定顺序编排组件中的方法和属性。&lt;br&gt;  按照以下顺序编排组件中的方法和属性：&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static diplayName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static propTypes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static contextTypes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static defaultProps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;其他静态的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;用于事件处理并且以属性的方式（onClick = e =&amp;gt; &amp;#123;...&amp;#125;）声明的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;其他实例属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getChildContext&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentWillMount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentDidMount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shouldComponentUpdate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentWillUpdate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentDidUpdate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事件处理方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;其他方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;其中shouldComponentUpdate和render是一个组件最容易被阅读的函数，因此放在最下方由于快度定位。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [建议]无需显式引入React对象。&lt;br&gt;  使用JSX隐式地依赖当前环境下有React这一对象，但在源码上并没有显式使用，这种情况下添加&lt;code&gt;import React from &amp;#39;react&amp;#39;;&lt;/code&gt;会造成一个没有使用的变量存在。&lt;br&gt;  使用babel-plugin-react-require插件可以很好地解决这一问题，因此无需显式地编写&lt;code&gt;import React from &amp;#39;react&amp;#39;;&lt;/code&gt;这一语句。&lt;/p&gt;
&lt;p&gt;· [建议]使用箭头函数声明函数组件。&lt;br&gt;  箭头函数具备更简洁的语法（无需function关键字），且可以在仅有一个语句时省去return造成的额外缩进。&lt;/p&gt;
&lt;p&gt;· [建议]高阶组件返回新的组件类型时，添加displayName属性。&lt;br&gt;  同时在displayName上声明告诫组建的存在。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; asPureComponent = Component =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; componentName = Component.displayName || Component.name || &lt;span class=&quot;string&quot;&gt;&#39;UnknownComponent&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PureComponent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; displayName = &lt;span class=&quot;string&quot;&gt;`asPure(&lt;span class=&quot;subst&quot;&gt;$&amp;#123;componentName&amp;#125;&lt;/span&gt;&amp;#125;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;Component &amp;#123;..this.props&amp;#125;/&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;组件实现&quot;&gt;&lt;a href=&quot;#组件实现&quot; class=&quot;headerlink&quot; title=&quot;组件实现&quot;&gt;&lt;/a&gt;组件实现&lt;/h2&gt;&lt;p&gt;· [强制]除顶层或路由级组件以外，所有组件均在概念上实现为纯组件（Pure Component）。&lt;br&gt;  本条规则并非要求组建继承自PureComponent，“概念上的纯组件”的意思为一个组件在props和state没有变化（shallowEqual）的情况下，渲染的结果应保持一直，即shouldComponentUpdate应当返回false。&lt;br&gt;  一个典型的非纯组件是使用了随机数或日期等函数：&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; RandomNumber = () =&amp;gt; &amp;lt;span&amp;gt;&amp;#123;Math.random&amp;#125;&amp;lt;/span&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Clock = () =&amp;gt; &amp;lt;span&amp;gt;&amp;#123;Date.time()&amp;#125;&amp;lt;/span&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  非纯组件具备向上的“传染性”，即一个包含非纯组件的组件必须是非纯组件，依然沿组件树结构向上。由于非纯组件无法通过shouldComponentUpdate优化渲染性能且具备传染性，因此要避免在非顶层或路由组件中使用。&lt;br&gt;  如果需要在组件树的某个节点使用随机数、日期等非纯的数据，应当由顶层组件生成这个值并通过props传递下来。对于使用Redux等应用状态管理的系统，可以在应用状态中存在相关的值（如Redux使用Action Creator生成这些值并通过Action和reducer更新到store中）。&lt;/p&gt;
&lt;p&gt;· [强制]禁止为继承自PureComponent的组件编写shouldCOmponentUpdate实现。&lt;br&gt;  参考&lt;a href=&quot;https://github.com/facebook/react/issues/9239&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React的相关Issue&lt;/a&gt;，在React的实现中，PureComponent并不是直接实现shouldComponentUpdate，而是添加一个isReactPureComponent的标记，由CompositeComponent通过识别这个标记实现相关的逻辑。因此在PureComponent上自定义shouldComponentUpdate并无法享受super.shouldComponentUpdate的逻辑复用，会使得这个继承关系失去意义。&lt;/p&gt;
&lt;p&gt;· [强制]为非继承自PureComponent的纯组件实现should方法。&lt;br&gt;  shouldComponentUpdate方法在React的性能中扮演者至关重要的角色，纯组件必定能通过props和state的变化来决定是否进行渲染，因此如果组件为纯组件且不继承shouldComponentUpdate，则应当有自己的shouldComponentUpdate实现来减少不必要的渲染。&lt;/p&gt;
&lt;p&gt;· [建议]为函数组件添加PureComponent能力。&lt;br&gt;  函数组件并非一定是纯组件，因此其shouldComponentUpdate的实现为true，这可能导致额外的无意义渲染，因此推荐使用高阶组件为其添加shouldComponentUpdate的相关逻辑。&lt;br&gt;  推荐使用react-pure-stateless-component库实现这一功能。&lt;/p&gt;
&lt;p&gt;· [建议]使用@autobind进行事件处理方法与this的绑定。&lt;br&gt;  由于PureComponent使用&lt;a href=&quot;https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/shallowEqual.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shallowEqual&lt;/a&gt;进行是否渲染的判断，如果在JSX中使用bind或箭头函数绑定this会造成子组件每次获取的函数都是一个新的引用，这破坏了shouldComponentUpdate的逻辑，引入了无意义的重复渲染，因此需要在render调用之前就将事件处理方法与this绑定，在每次render调用中获取同样的引用。&lt;br&gt;  当前比较流行的事前绑定this的方法有2种，其一使用类属性的方法：&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onClick = e =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  其二使用@autobind的装饰器：&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @autobind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onClick(e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  使用类属性语法虽然可以避免引入一个autobind的实现，但存在一定的缺陷：&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;· 对于新手不容易理解函数内部的this定义。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;· 无法在函数是使用其他的装饰器（如memoize、deprecated或检验相关的逻辑等）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因此，推荐使用@autobind装饰器实现this的事先绑定，推荐使用core-decorators库提供的相关装饰器实现。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;JSX&quot;&gt;&lt;a href=&quot;#JSX&quot; class=&quot;headerlink&quot; title=&quot;JSX&quot;&gt;&lt;/a&gt;JSX&lt;/h2&gt;&lt;p&gt;· [强制]没有子节点的非DOM组件使用自闭合语法。&lt;br&gt;  对于DOM节点，按照HTML编码规范相关规则进行闭合，其中void element使用自闭合语法。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo&amp;gt;&amp;lt;/Foo&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [强制]保持起始和结束标签在同一层缩进。&lt;br&gt;  对于标签前面有其他语句（如return的情况，使用括号进行换行和缩进）。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;span&amp;gt;Hello World&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;span&amp;gt;Hello World&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  对于直接return的函数组件，可以直接使用括号而省去大括号和return关键字：&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Message = () =&amp;gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;span&amp;gt;Hello World&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [强制]对于多属性需要换行，从第一个属性开始，每个属性一行。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 没有子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;SomComponent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    longProp=&amp;#123;longProp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    anotherLongProp=&amp;#123;anotherLongProp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 有子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;SomeComponent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    longProp=&amp;#123;longProp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    anotherLongProp=&amp;#123;anotherLongProp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;SomeChild /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;SomeChild /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/SomeComponent&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [强制]以字符串字面量作为值的属性使用双引号（”），在其他类型表达式中的字符串使用单引号（’）。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo bar=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo style=&amp;#123;&amp;#123;width: &quot;20px&quot;&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo bar=&quot;bar&quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo style=&amp;#123;&amp;#123;width: &#39;20px&#39;&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [强制]自闭合标签的/&amp;gt;前添加一个空格。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo bar=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo bar=&quot;bar&quot;  /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo bar=&quot;bar&quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [强制]对于值为true的属性，省去值部分。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo visible=&amp;#123;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Foo visible /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [强制]对于需要使用key的场合，提供一个唯一标识作为key属性的值，禁止使用可能会变化的属性（如索引）。&lt;br&gt;  key属性是React在进行列表更新时的重要属性，如该属性会发生变化，渲染的性能和正确性都无法得到保证。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;list.map((item, index) =&amp;gt; &amp;lt;Foo key=&amp;#123;index&amp;#125; &amp;#123;...item&amp;#125; /&amp;gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;list.map(item =&amp;gt; &amp;lt;Foo key=&amp;#123;item.id&amp;#125; &amp;#123;...item&amp;#125; /&amp;gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [建议]避免在JSX的属性值中直接使用对象和函数表达式。&lt;br&gt;  PureComponent使用&lt;a href=&quot;https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/shallowEqual.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shallowEqual&lt;/a&gt;对props和state进行比较来决定是否需要渲染，而在JSX的属性值中使用对象、函数表达式会造成每一次的对象引用不同，从而shallowEqual会返回false，导致不必要的渲染。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WarnButton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alertMessage(message) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;button type=&quot;button&quot; onClick=&amp;#123;() =&amp;gt; this.alertMessage(this.props.message)&amp;#125;&amp;gt;提示&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WarnButton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @autobind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alertMessage() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;button type=&quot;button&quot; onClick=&amp;#123;this.alertMessage&amp;#125;&amp;gt;提示&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;· [建议]将JSX的层级控制在3层以内。&lt;br&gt;  JSX提供了基于组件的便携的复用形式，因此可以通过将结构中的一部分封装为一个函数组件来很好地拆分大型复杂的结构。层次过深的结构会带来过多缩进、可读性下降等缺点。如同控制函数内代码行数和分支层级一样，对JSX的层级进行控制可以有效提升代码的可维护性。&lt;br&gt;  &lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; list = (&amp;#123;items&amp;#125;) = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             items.map(item =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;lt;li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &amp;lt;header&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         &amp;lt;h3&amp;gt;&amp;#123;item.title&amp;#125;&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         &amp;lt;span&amp;gt;&amp;#123;item.subtitle&amp;#125;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &amp;lt;/header&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &amp;lt;section&amp;gt;&amp;#123;item.content&amp;#125;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &amp;lt;footer&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         &amp;lt;span&amp;gt;&amp;#123;item.author&amp;#125;&amp;lt;/span&amp;gt;@&amp;lt;time&amp;gt;&amp;#123;time.postTime&amp;#125;&amp;lt;/time&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &amp;lt;/footer&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Header = (&amp;#123;title, subtitle&amp;#125;) =&amp;gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;header&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;h3&amp;gt;&amp;#123;title&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;span&amp;gt;&amp;#123;subtitle&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/header&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Content = (&amp;#123;content&amp;#125;) =&amp;gt; &amp;lt;section&amp;gt;&amp;#123;content&amp;#125;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Footer = (&amp;#123;author, postTime&amp;#125;) =&amp;gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;footer&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;span&amp;gt;&amp;#123;author&amp;#125;&amp;lt;/span&amp;gt;@&amp;lt;time&amp;gt;&amp;#123;postTime&amp;#125;&amp;lt;/time&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/footer&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Item = (&amp;#123;item&amp;#125;) =&amp;gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Header &amp;#123;...item&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Content &amp;#123;...item&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Footer &amp;#123;...item&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let List = (&amp;#123;items&amp;#125;) =&amp;gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;items.map(Item)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件组织&quot;&gt;&lt;a href=&quot;#文件组织&quot; class=&quot;headerlink&quot; title=&quot;文件组织&quot;&gt;&lt;/a&gt;文件组织&lt;/h2&gt;&lt;p&gt;· [强制]同一目录下不得拥有同名的.js和.jsx文件。&lt;br&gt;  在使用模块导入时，倾向于不添加后缀，如果存在同名但不同
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>常用Chrome插件有哪些？</title>
    <link href="http://yoursite.com/2017/08/08/chrome-common-plugin/"/>
    <id>http://yoursite.com/2017/08/08/chrome-common-plugin/</id>
    <published>2017-08-08T06:45:55.000Z</published>
    <updated>2017-10-12T12:48:19.359Z</updated>
    
    <content type="html">&lt;p&gt;作为一名web开发者，会接触到很多开发工具，今天就来说说常用的chrome插件，利用这些插件给平时的工作、开发带来很大的便利。&lt;/p&gt;
&lt;h2 id=&quot;浏览器相关&quot;&gt;&lt;a href=&quot;#浏览器相关&quot; class=&quot;headerlink&quot; title=&quot;浏览器相关&quot;&gt;&lt;/a&gt;浏览器相关&lt;/h2&gt;&lt;p&gt;首选介绍这几个插件在浏览器使用过程中会有一些优化，它会给你带来什么样的体验呢？赶快去体验吧~&lt;/p&gt;
&lt;h3 id=&quot;Momentum&quot;&gt;&lt;a href=&quot;#Momentum&quot; class=&quot;headerlink&quot; title=&quot;Momentum&quot;&gt;&lt;/a&gt;Momentum&lt;/h3&gt;&lt;p&gt;Momentum插件用来替换Chrome新标签页内容，每天能看到不同优美的风景图片和精彩的格言。打开浏览器就能看到这么激励人心的内容，有木有给你的工作和生活带来动力？除此之外，该插件还提供了其他重要的功能，可以设置天气信息，待办事件记录，日常事务等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-momentum.png&quot; alt=&quot;momentum&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;OneTab&quot;&gt;&lt;a href=&quot;#OneTab&quot; class=&quot;headerlink&quot; title=&quot;OneTab&quot;&gt;&lt;/a&gt;OneTab&lt;/h3&gt;&lt;p&gt;Chrome浏览器虽然访问页面很流畅，但是消耗内存也很大。OneTab字面意思即一个tab页面，当你用浏览器打开多个标签页，也许很多重要的内容没来得及看但又不想把它立即关掉，这时候你可以用OneTab插件来管理打开的tab标签页内容了。单击OneTab图标会将所有标签页转换成一个列表，在某个标签页可以选择左侧或右侧标签页放到OneTab列表页中。当再次访问这些标签页时可以从从这里恢复它们。将标签页放置到OneTab中，浏览器打开的标签页减少了，占用系统内存相应减少。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-onetab.png&quot; alt=&quot;onetab&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Proxy-SwitchySharp&quot;&gt;&lt;a href=&quot;#Proxy-SwitchySharp&quot; class=&quot;headerlink&quot; title=&quot;Proxy SwitchySharp&quot;&gt;&lt;/a&gt;Proxy SwitchySharp&lt;/h3&gt;&lt;p&gt;由于国内某些原因（你懂得），常常不能访问国外一些网站，这时候要访问这些内容时需要借助一些工具才能达到。这些工具就是代理，采用了代理浏览器则会通过代理去请求资源，从而绕开一些壁垒，请求到相应资源。Proxy SwitchSharp就是用来管理浏览器代理，可以将代理信息在这里设置从而达到“科学上网”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-proxy-switchysharp.png&quot; alt=&quot;proxy switchysharp&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一键管理&quot;&gt;&lt;a href=&quot;#一键管理&quot; class=&quot;headerlink&quot; title=&quot;一键管理&quot;&gt;&lt;/a&gt;一键管理&lt;/h3&gt;&lt;p&gt;也许你的浏览器安装了不止一个插件，当你想把某个插件禁用或开启，没有安装此插件则需要到浏览器扩展程序页面中操作。一键管理插件会将浏览器安装过的所有插件放在一个控制面板中展示，所有插件一键开启或禁止，也可以针对某个插件开启或禁止。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-onekeyplugin.png&quot; alt=&quot;onekeyplugin&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;二维码&quot;&gt;&lt;a href=&quot;#二维码&quot; class=&quot;headerlink&quot; title=&quot;二维码&quot;&gt;&lt;/a&gt;二维码&lt;/h3&gt;&lt;p&gt;我们常常会在电脑上访问的页面用手机去浏览，比如开发测试无线页面效果，一般做法是将浏览器上访问的地址用手机浏览器打开，这样难以避免输入一串网址的烦恼，而且容易出错。有了这个插件，可以直接用手机扫描插件生成的二维码，从而快速访问到页面内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-qrcode.png&quot; alt=&quot;qrcode&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Github相关&quot;&gt;&lt;a href=&quot;#Github相关&quot; class=&quot;headerlink&quot; title=&quot;Github相关&quot;&gt;&lt;/a&gt;Github相关&lt;/h2&gt;&lt;p&gt;github对于一个开发者来说并不陌生，github作为一个代码托管的在线服务，许多优秀的开发资源在这里涌现。Github最丰富的资源就是代码和文档，开发者可以从这里学习和利用到很多资源。下面介绍这几款与github相关的插件。&lt;/p&gt;
&lt;h3 id=&quot;Avatars-for-Github&quot;&gt;&lt;a href=&quot;#Avatars-for-Github&quot; class=&quot;headerlink&quot; title=&quot;Avatars for Github&quot;&gt;&lt;/a&gt;Avatars for Github&lt;/h3&gt;&lt;p&gt;登录用户访问github网站首页，呈现的是许多关注用户的一些动态信息，比如创建代码仓库、关注代码仓库、提及到代码、留言评论，网站默认不显示用户头像，只显示出用户名。人通常对图片比文字敏感，看到图片能更快获取到信息。使用了这个插件就能让页面中涉及的用户头像展示出来，浏览信息更加引起用户的注意力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-avatars-for-github.png&quot; alt=&quot;avatars for github&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Insight-io-for-Github&quot;&gt;&lt;a href=&quot;#Insight-io-for-Github&quot; class=&quot;headerlink&quot; title=&quot;Insight.io for Github&quot;&gt;&lt;/a&gt;Insight.io for Github&lt;/h3&gt;&lt;p&gt;用户在访问一个仓库的源代码时通常是在各个目录和文件中来回切换，需要在页面中点击相应链接跳转才能实现。现在把这款强大的代码组织管理插件装上，你会越来越爱上这款插件。开启这个插件，在当前页面会展现代码的目录结构，单页面访问任何文件内容，展示文件的具体内容结构以及跨代码仓库查看文件内容引用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-insight.io-for-github.png&quot; alt=&quot;insight.io for github&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Sourcegraph-for-Github&quot;&gt;&lt;a href=&quot;#Sourcegraph-for-Github&quot; class=&quot;headerlink&quot; title=&quot;Sourcegraph for Github&quot;&gt;&lt;/a&gt;Sourcegraph for Github&lt;/h3&gt;&lt;p&gt;装上这个插件当你在浏览代码、提交信息、diff信息时github像一个IDE一样，代码语法高亮显示，可以进行代码高级查找、跳转到代码定义所在行、发现代码相关引用。无论功能和效果都比上一个插件强大，不过使用这个插件会先打开一个新页面，然后加载内容展示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-sourcegraph-for-github.png&quot; alt=&quot;sourcegraph for github&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;octotree&quot;&gt;&lt;a href=&quot;#octotree&quot; class=&quot;headerlink&quot; title=&quot;octotree&quot;&gt;&lt;/a&gt;octotree&lt;/h3&gt;&lt;p&gt;启动这个插件，访问代码仓库时会展现代码结构树，便于代码浏览。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-octotree.png&quot; alt=&quot;octotree&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Github-Markdown-Menu&quot;&gt;&lt;a href=&quot;#Github-Markdown-Menu&quot; class=&quot;headerlink&quot; title=&quot;Github Markdown Menu&quot;&gt;&lt;/a&gt;Github Markdown Menu&lt;/h3&gt;&lt;p&gt;Github Markdown Menu会给readme或者Markdown文件生成一个导航目录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-github-markdown-menu.png&quot; alt=&quot;github markdown menu&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前端框架相关&quot;&gt;&lt;a href=&quot;#前端框架相关&quot; class=&quot;headerlink&quot; title=&quot;前端框架相关&quot;&gt;&lt;/a&gt;前端框架相关&lt;/h2&gt;&lt;p&gt;Angular、React、Vue号称当前前端主流的三大框架，下面这几款插件就与它们息息相关，运用这些插件在程序调试过程中得心应手。&lt;/p&gt;
&lt;h3 id=&quot;AngularJS-Batarang&quot;&gt;&lt;a href=&quot;#AngularJS-Batarang&quot; class=&quot;headerlink&quot; title=&quot;AngularJS Batarang&quot;&gt;&lt;/a&gt;AngularJS Batarang&lt;/h3&gt;&lt;p&gt;这个插件为AngularJS框架扩展浏览器开发者工具功能，用来调试angularjs应用、性能测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-angularjs-batarang.png&quot; alt=&quot;angularjs batarang&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;React-Developer-Tools&quot;&gt;&lt;a href=&quot;#React-Developer-Tools&quot; class=&quot;headerlink&quot; title=&quot;React Developer Tools&quot;&gt;&lt;/a&gt;React Developer Tools&lt;/h3&gt;&lt;p&gt;该插件为开源React.js JavaScript库扩展浏览器开发者工具功能，方便用户查看页面组件树结构关系。你可以在控制面板下选中组件展示其组件属性，也可以改变组件的pros和state内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-react-developer-tools.png&quot; alt=&quot;react developer tools&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Vue-js-devtools&quot;&gt;&lt;a href=&quot;#Vue-js-devtools&quot; class=&quot;headerlink&quot; title=&quot;Vue.js devtools&quot;&gt;&lt;/a&gt;Vue.js devtools&lt;/h3&gt;&lt;p&gt;这个插件为Vue.js框架扩展浏览器开发者工具功能，用来调试Vue.js应用程序，展示组件结构，跟踪组件数据流。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-vue.js-devtools.png&quot; alt=&quot;vue.js devtools&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;开发工具相关&quot;&gt;&lt;a href=&quot;#开发工具相关&quot; class=&quot;headerlink&quot; title=&quot;开发工具相关&quot;&gt;&lt;/a&gt;开发工具相关&lt;/h2&gt;&lt;p&gt;除了上面这几款实用的插件，还有很多优秀的开发工具插件，下面列举我平时使用过的一些用于开发的插件。&lt;/p&gt;
&lt;h3 id=&quot;Postman&quot;&gt;&lt;a href=&quot;#Postman&quot; class=&quot;headerlink&quot; title=&quot;Postman&quot;&gt;&lt;/a&gt;Postman&lt;/h3&gt;&lt;p&gt;Postman并不是Chrome扩展程序，而是一个Chrome应用，这里把它列出来在于其在网络请求方面功能很强大。该插件可用来做API开发调试，支持多种请求方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-postman.png&quot; alt=&quot;postman&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;LiveReload&quot;&gt;&lt;a href=&quot;#LiveReload&quot; class=&quot;headerlink&quot; title=&quot;LiveReload&quot;&gt;&lt;/a&gt;LiveReload&lt;/h3&gt;&lt;p&gt;在开发网络应用程序时，开启这个插件文件内容更新其展示页面会同步更新。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-livereload.png&quot; alt=&quot;livereload&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;JSONView&quot;&gt;&lt;a href=&quot;#JSONView&quot; class=&quot;headerlink&quot; title=&quot;JSONView&quot;&gt;&lt;/a&gt;JSONView&lt;/h3&gt;&lt;p&gt;可用于校验json文件内容，格式化高亮展现json文件内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-jsonview.png&quot; alt=&quot;jsonview&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;FeHelper&quot;&gt;&lt;a href=&quot;#FeHelper&quot; class=&quot;headerlink&quot; title=&quot;FeHelper&quot;&gt;&lt;/a&gt;FeHelper&lt;/h3&gt;&lt;p&gt;FE助手：包括字符串编解码、代码压缩、美化、JSON格式化、正则表达式、时间转换工具、二维码生成器、编码规范检测、页面性能检测、页面取色、Ajax接口调试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-fehelper.png&quot; alt=&quot;fehelper&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Sizzy&quot;&gt;&lt;a href=&quot;#Sizzy&quot; class=&quot;headerlink&quot; title=&quot;Sizzy&quot;&gt;&lt;/a&gt;Sizzy&lt;/h3&gt;&lt;p&gt;响应式网站调试工具，支持多种机型和尺寸。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-sizzy.png&quot; alt=&quot;sizzy&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Distill-Web-Monitor&quot;&gt;&lt;a href=&quot;#Distill-Web-Monitor&quot; class=&quot;headerlink&quot; title=&quot;Distill Web Monitor&quot;&gt;&lt;/a&gt;Distill Web Monitor&lt;/h3&gt;&lt;p&gt;Distill在您的浏览器上运行，检查监控的页面有无变更。在侦测到变更时立即发出通知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-distill-web-monitor.png&quot; alt=&quot;disll web monitor&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Web-Developer&quot;&gt;&lt;a href=&quot;#Web-Developer&quot; class=&quot;headerlink&quot; title=&quot;Web Developer&quot;&gt;&lt;/a&gt;Web Developer&lt;/h3&gt;&lt;p&gt;一个拥有丰富功能的网页开发工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-web-developer.png&quot; alt=&quot;web developer&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;HTML5-Outliner&quot;&gt;&lt;a href=&quot;#HTML5-Outliner&quot; class=&quot;headerlink&quot; title=&quot;HTML5 Outliner&quot;&gt;&lt;/a&gt;HTML5 Outliner&lt;/h3&gt;&lt;p&gt;生成一个带有标题和区域元素的html5页面轮廓结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-html5-outliner.png&quot; alt=&quot;html5 outliner&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Open-SEO-Stats&quot;&gt;&lt;a href=&quot;#Open-SEO-Stats&quot; class=&quot;headerlink&quot; title=&quot;Open SEO Stats&quot;&gt;&lt;/a&gt;Open SEO Stats&lt;/h3&gt;&lt;p&gt;显示当前网页的排名和 SEO 统计数据，主要包括 Alexa、Compete、Quantcast 排名，以及外链、索引数、IP 位置、Whois、SNS、缓存等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-open-seo-stats.png&quot; alt=&quot;open seo stats&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Humans-txt&quot;&gt;&lt;a href=&quot;#Humans-txt&quot; class=&quot;headerlink&quot; title=&quot;Humans.txt&quot;&gt;&lt;/a&gt;Humans.txt&lt;/h3&gt;&lt;p&gt;如果网站存在humans.txt内容，可用来展现其具体内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201708/2017-08-08-humans.png&quot; alt=&quot;humans&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名web开发者，会接触到很多开发工具，今天就来说说常用的chrome插件，利用这些插件给平时的工作、开发带来很大的便利。&lt;/p&gt;
&lt;h2 id=&quot;浏览器相关&quot;&gt;&lt;a href=&quot;#浏览器相关&quot; class=&quot;headerlink&quot; title=&quot;浏览器相关&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="tool" scheme="http://yoursite.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>一次重构静态网站浅谈</title>
    <link href="http://yoursite.com/2017/07/29/refactor-static-website/"/>
    <id>http://yoursite.com/2017/07/29/refactor-static-website/</id>
    <published>2017-07-29T15:03:29.000Z</published>
    <updated>2017-10-12T12:46:46.102Z</updated>
    
    <content type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;静态网站顾名思义是由静态页面构成的网站，不涉及到后端数据库系统，页面中的内容在制作的时候就已经写好了。若需要去改某个页面的内容则需要找到该页面的模板文件修改。&lt;/p&gt;
&lt;p&gt;最近收到了一个大学老师的消息，问我是否有空能帮她做个课题申报项目网站。我按照了项目开发的流程先打听了老师的项目需求，老师说该项目需求与在大学期间帮她做的那个课题申报项目类似，具体需求内容在此不多介绍了，主要是课题的一些相关内容需要采用网站的形式展示出来。&lt;/p&gt;
&lt;p&gt;通过收藏夹打开了大学期间做的那个网站，网站挂靠在校园的服务器上，还能完好的访问。整个网站内容大致有7大板块，每个板块由侧边栏目录导航内容和右侧内容显示区块组成，整个网站大概有30个静态页面。我习惯性的会打开浏览器的控制台看页面结构和源码，发现页面中的资源引入和跳转链接全都采用了相对路径，出现了很多以.和..构成的链接，对我这种有整洁癖好的人引起了强迫症。&lt;/p&gt;
&lt;p&gt;老师把四年前的源代码发给了我，我细看源码网站的内容由一个一个静态html页面组成，没有公共的模块内容，页面中的顶部图、导航条、版权栏都分散在各个页面中，没有独立出来。新的需求同样有这三块的内容，修改一处意味着每个页面都得改一次，严重影响了开发效率。基于此寻思着新的解决方案搭建这个静态网站。&lt;/p&gt;
&lt;h2 id=&quot;技术调研&quot;&gt;&lt;a href=&quot;#技术调研&quot; class=&quot;headerlink&quot; title=&quot;技术调研&quot;&gt;&lt;/a&gt;技术调研&lt;/h2&gt;&lt;p&gt;首先想到的是做这个静态网站能否像写博客那样，利用markdown语法书写各个页面的内容。但考虑到页面中的内容除了纯文本内容外，还包含了pdf文档、视频内容。对整个网站内容大致细分了各个组成模块，发现可以抽出一个基础的模板布局文件，将网站的顶部图片、导航条、版权栏内容单独抽出来，再分别引入到各个页面中，浏览pdf文档与观看视频功能可以制作成组件，在页面中通过使用组件就能方便快捷搭建内容。&lt;/p&gt;
&lt;p&gt;基于上述的需求诉求，我采用了模板引擎来完成这些内容。模板引擎是个什么东西呢？模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。&lt;/p&gt;
&lt;p&gt;模板引擎的实现方式有很多，最简单的是“置换型”模板引擎，这类模板引擎只是将指定模板内容（字符串）中的特定标记（子字符串）替换一下便生成了最终需要的业务数据（比如网页）。置换型模板引擎实现简单，但其效率低下，无法满足高负载的应用需求（比如有海量访问的网站），因此还出现了“解释型”模板引擎和“编译型”模板引擎等。模板引擎又分为前端模板引擎和后端模板引擎。后端模板引擎针对各种语言分别有相对应的模板引擎，像PHP语言比较知名的smarty，Java语言Velocity，Python语言Django等等。常见流行的前端模板引擎有artTemplate、Mustache、HandlebarsJS、EJS、Jade（新名pug）、Swig等等。&lt;/p&gt;
&lt;p&gt;静态网站不涉及到后端内容，选用前端模板即可解决问题。那这么多前端模板引擎如何选择才能找到一个合适的模板引擎呢？在开发中有良好的运行调试能力，支持模板继承和文件引入，支持作用域变量和判断循环条件语句，拥有简洁的语法在一定条件下能减少代码书写量，拥有上述这些特点的模板引擎都能支撑起业务开发，于是我选择了pug模板引擎。&lt;/p&gt;
&lt;h2 id=&quot;实践思路&quot;&gt;&lt;a href=&quot;#实践思路&quot; class=&quot;headerlink&quot; title=&quot;实践思路&quot;&gt;&lt;/a&gt;实践思路&lt;/h2&gt;&lt;h3 id=&quot;目录规划&quot;&gt;&lt;a href=&quot;#目录规划&quot; class=&quot;headerlink&quot; title=&quot;目录规划&quot;&gt;&lt;/a&gt;目录规划&lt;/h3&gt;&lt;p&gt;对一个静态网站来说，资源包含静态模板页面、样式文件、静态资源（如图片、视频、文档等等）。如何设计整个网站的目录结构对开发效率来说有很大的影响。目前大体上网站的目录结构有两种分类方式，一种是根据功能来划分目录结构，比如某个页面实现所需要的业务组件、样式都放在同一个目录里，这种对于业务功能比较复杂类应用来说尤为方便，资源查找和引用一目了然；另一种是根据文件类型来划分目录结构，这种对于网站文件管理比较方便。&lt;/p&gt;
&lt;p&gt;根据这个静态网站的需求来开发，网站内容偏展示，不涉及复杂的页面交互逻辑，以文件类型为目录结构规划网站内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201707/2017-07-project-directory.png&quot; alt=&quot;目录结构图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;开发细节&quot;&gt;&lt;a href=&quot;#开发细节&quot; class=&quot;headerlink&quot; title=&quot;开发细节&quot;&gt;&lt;/a&gt;开发细节&lt;/h3&gt;&lt;p&gt;得益于pug简洁的模板语法和强大的模板功能，pug在这个项目中发挥了很大作用。每个页面都是继承自base layout，其中base layout包括页面banner、nav、footer公用的组件，nav的状态可以通过在具体页面中传入变量实现。每个页面根据实际情况可以划分为侧边导航栏组件和内容区域，从而组成一个个具体的页面。&lt;/p&gt;
&lt;p&gt;pdf文件浏览采用开源的pdf.js库，能够实现跨平台在线浏览pdf文件内容。视频文件考虑到文件格式兼容性和在线存储，使用了传统的flash流式播放。封装了这两个组件，在使用的时候采用参数传入的方式来调动功能，从而达到复用。&lt;/p&gt;
&lt;p&gt;采用这种继承layout和组件形式开发，节省了很多开发工作量，开发效率得到很大提升，并且易于维护。&lt;/p&gt;
&lt;h3 id=&quot;构建部署&quot;&gt;&lt;a href=&quot;#构建部署&quot; class=&quot;headerlink&quot; title=&quot;构建部署&quot;&gt;&lt;/a&gt;构建部署&lt;/h3&gt;&lt;p&gt;现在每个网站的开发、测试、上线离不开一个构建部署脚本。node.js的不断发展，生态系统日益壮大，有很多方便快捷的工具可以用于开发构建。本项目用到了将pug模板编译成html内容，css和js文件压缩，浏览器同步自动更新构建工具，基于文件流和任务式自动化构建工具gulp.js，能够简单高效的完成网站的构建与部署。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/201707/2017-07-29-work-stream.png&quot; alt=&quot;构建流程图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;完成整个网站开发涉及到了方方面面，一点一滴的积累和实践，得到了成长，收获了快乐。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;静态网站顾名思义是由静态页面构成的网站，不涉及到后端数据库系统，页面中的内容在制作的时候就已经写好了。若需要去改某个页面的内容则需要找到该页
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
</feed>
